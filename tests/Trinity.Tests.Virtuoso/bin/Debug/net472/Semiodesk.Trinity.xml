<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Semiodesk.Trinity</name>
    </assembly>
    <members>
        <member name="T:Semiodesk.Trinity.NotifyPropertyChangedAttribute">
            <summary>
            Marks the property as NotifyingProperty.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.RdfClassAttribute">
            <summary>
            Decorate a class with this attribute to mark it as mapping for an RDF class of the given type.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfClassAttribute.MappedUri">
            <summary>
            The Uri of the type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.RdfClassAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="uriString">The uri of the RDF class for this mapping.</param>
        </member>
        <member name="T:Semiodesk.Trinity.RdfPropertyAttribute">
            <summary>
            Decorate a property with this attribute to mark it as mapped RDF property with the given type.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfPropertyAttribute.MappedUri">
            <summary>
            Uri of the the RDF property
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfPropertyAttribute.LanguageInvariant">
            <summary>
            Flag determining if property is language invariant. Only valid for string or string collections.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.RdfPropertyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="uriString">There uri of the rdf property for this mapping.</param>
            <param name="languageInvariant">The mapping ignores the language setting and is always non-localized. Only valid if type or generic type is string or string collection.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Class">
            <summary>
            The class of resources that are RDF classes.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Class.#ctor(System.Uri)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Class.#ctor(Semiodesk.Trinity.UriRef)">
            <summary>
            Constrctor
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Class.#ctor(System.String)">
            <summary>
            Constrctor
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1">
            <summary>
            Derived VirtualizatingCollection, performing loading asychronously.
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.SynchronizationContext">
            <summary>
            Gets the synchronization context used for UI-related operations. This is obtained as
            the current SynchronizationContext when the AsyncVirtualizingCollection is created.
            </summary>
            <value>The synchronization context.</value>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.IsLoading">
            <summary>
            Gets or sets a value indicating whether the collection is loading.
            </summary>
            <value>
            <c>true</c> if this collection is loading; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageTimeout">The page timeout.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadCount">
            <summary>
            Asynchronously loads the count of items.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadCountWork(System.Object)">
            <summary>
            Performed on background thread.
            </summary>
            <param name="args">None required.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadCountCompleted(System.Object)">
            <summary>
            Performed on UI-thread after LoadCountWork.
            </summary>
            <param name="args">Number of items returned.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadPage(System.Int32)">
            <summary>
            Asynchronously loads the page.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadPageWork(System.Object)">
            <summary>
            Performed on background thread.
            </summary>
            <param name="args">Index of the page to load.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.LoadPageCompleted(System.Object)">
            <summary>
            Performed on UI-thread after LoadPageWork.
            </summary>
            <param name="args">object[] { int pageIndex, IList(T) page }</param>
        </member>
        <member name="E:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.CollectionChanged">
            <summary>
            The event that gets notified if the collection gets changed.
            </summary>
        </member>
        <member name="E:Semiodesk.Trinity.Collections.AsyncVirtualizingCollection`1.PropertyChanged">
            <summary>
            The event that gets notified if a property has changed.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1">
            <summary>
            An generic asynchrous virtualizing collection for sparql queries.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection`1"/> class.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Collections.IItemsProvider`1">
            <summary>
            A generic items provider collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.IItemsProvider`1.Count">
            <summary>
            Number of element in the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.IItemsProvider`1.GetItems(System.Int32,System.Int32)">
            <summary>
            Enumerator of the items.
            </summary>
            <param name="offset"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Collections.VirtualizingCollection`1">
            <summary>
            A generic virtualizing collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Semiodesk.Trinity.Collections.VirtualizingCollection`1._pageSize">
            <summary>
            The page size contains the number of elements per page.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Collections.VirtualizingCollection`1._pageTimeout">
            <summary>
            The time after which a page can be removed.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.PageSize">
            <summary>
            The page size contains the number of elements per page.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.PageTimeout">
            <summary>
            Timeout in ms. If the page has not been touched it can be removed with CleanUpPages.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Count">
            <summary>
            Number of elements in the list.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>Always false.
            </returns>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>Always true.
            </returns>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>Always false.
            </returns>
        </member>
        <member name="P:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Item(System.Int32)">
            <summary>
            Access an element at a certain index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.VirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">Items provider</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageTimeout">The page timeout.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.VirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.#ctor(Semiodesk.Trinity.Collections.IItemsProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.Collections.VirtualizingCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.GetEnumerator">
            <summary>
            Returns the enumerator of the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Add(`0)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Contains(`0)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Clear">
            <summary>
            The list is read-only, not supported.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of a certain element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Insert(System.Int32,`0)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.RemoveAt(System.Int32)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.Remove(`0)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            The list is read-only, not supported.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.CleanUpPages">
            <summary>
            Removes pages that have not been touched recently. The timeout can be configured with the PageTimeout.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.LoadPage(System.Int32)">
            <summary>
            Load page with the given index.
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.PopulatePage(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Sets the given page to the given index.
            </summary>
            <param name="pageIndex"></param>
            <param name="page"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.RequestPage(System.Int32)">
            <summary>
            Load the page with the given index.
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.LoadCount">
            <summary>
            Loads the count of the collection.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.FetchPage(System.Int32)">
            <summary>
            Gets the page from the item provider.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Collections.VirtualizingCollection`1.FetchCount">
            <summary>
            Gets the element count from the item provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlQueryItemsProvider`1">
            <summary>
            The item provider for sparql queries.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryItemsProvider`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Boolean)">
            <summary>
            Constructor for the SparqlQueryItemsProvider.
            </summary>
            <param name="model">The model on which the query should be executed.</param>
            <param name="query">The query that should be executed.</param>
            <param name="inferenceEnabled">Modifier if inferncing should be enabled. Default is true</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryItemsProvider`1.Count">
            <summary>
            Number of elements in the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryItemsProvider`1.GetItems(System.Int32,System.Int32)">
            <summary>
            Enumerator of the items. Should be narrowed with offset and limit.
            </summary>
            <param name="offset">Offset of the element where to start.</param>
            <param name="limit">Number of elements.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.VirtualizingSparqlCollection`1">
            <summary>
            A virtualizing collection for sparql query results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semiodesk.Trinity.VirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.VirtualizingSparqlCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.VirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.VirtualizingSparqlCollection`1"/> class.
            </summary>
            <param name="model">The model to query.</param>
            <param name="query">The query.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="inferenceEnabled">Using inferencing</param>
        </member>
        <member name="M:Semiodesk.Trinity.VirtualizingSparqlCollection`1.#ctor(Semiodesk.Trinity.IModel,Semiodesk.Trinity.SparqlQuery,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Semiodesk.Trinity.VirtualizingSparqlCollection`1"/> class.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.FileSource">
            <summary>
            The FileSource represents the path of the ontology on the disk.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.FileSource.Location">
            <summary>
            This is the string containing the path.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Ontology">
            <summary>
            The ontology configuration section.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology._uri">
            <summary>
            The uri of the ontology as string.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.Uri">
            <summary>
            Wrapper for the uri of the ontology as Uri.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.Prefix">
            <summary>
            The prefix of the ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.Timestamp">
            <summary>
            The timestamp when the ontology was first introduced in the project.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.Version">
            <summary>
            Version of the ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.WebSource">
            <summary>
            The location of the ontology file in the web.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.FileSource">
            <summary>
            The location of the ontology file on the disk.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Ontology.ToString">
            <summary>
            Serialization of th ontology.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Ontology.GetHashCode">
            <summary>
            Hashcode of the ontology.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontology.Location">
            <summary>
            Wrapper for the local path of the ontology.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.WebSource">
            <summary>
            Location of the ontology in the web.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.WebSource.Location">
            <summary>
            The url of the ontology in the web.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Ontologies">
            <summary>
            The section containing all ontologies.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontologies.OntologyList">
            <summary>
            The list of all ontologies
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Ontologies.Namespace">
            <summary>
            The namespace the ontologies should be generated to.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.StoreConfiguration">
            <summary>
            The general store configuration section.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.StoreConfiguration.Type">
            <summary>
            The store type this configuration belongs to.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.StoreConfiguration.Data">
            <summary>
            The content of the store configuration. Will be handled by the store implementation.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Stores">
            <summary>
            The store section of the configuration.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Stores.StoreList">
            <summary>
            The list of the store configurations.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Configuration">
            <summary>
            The general configuration section.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Configuration.Ontologies">
            <summary>
            The ontology section.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Configuration.Stores">
            <summary>
            The store section.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Configuration.Namespace">
            <summary>
            Wrapper for the namespace for this project.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Configuration.ListOntologies">
            <summary>
            Wrapper for an easier ontology access.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Configuration.ListStoreConfigurations">
            <summary>
            Wrapper for the store configurations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.ConfigurationLoader">
            <summary>
            Loads Trinity RDF settings from a XML configuration file.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.IConfiguration">
            <summary>
            Exposes settings for Trinity RDF projects.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IConfiguration.Namespace">
            <summary>
            Get the default namespace for generated C# classes.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.IConfiguration.ListOntologies">
            <summary>
            Get the ontology settings for the current project.
            </summary>
            <returns>An enumeration of ontology settings.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.IConfiguration.ListStoreConfigurations">
            <summary>
            Get the triple store settings for the current project.
            </summary>
            <returns>An enumeration of triple store settings.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.IOntologyConfiguration">
            <summary>
            Exposes ontology settings for a Trinity RDF project.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IOntologyConfiguration.Uri">
            <summary>
            Get the namespace URI of the ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IOntologyConfiguration.Prefix">
            <summary>
            Get the default prefix of the ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IOntologyConfiguration.Location">
            <summary>
            Get the location of the ontology source file.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.IStoreConfiguration">
            <summary>
            Exposes triple store settings for Trinity RDF projects.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IStoreConfiguration.Type">
            <summary>
            Get the triple store type identifier.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.IStoreConfiguration.Data">
            <summary>
            Get store specific XML configuration data.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.FileSource">
            <summary>
            A file source of a element
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.FileSource.Location">
            <summary>
            The location of this file source
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.Graph">
            <summary>
            A graph element in the configuration.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Graph.Uri">
            <summary>
            The Uri of the graph element
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.GraphCollection">
            <summary>
            A collection containing all graphs in the configuration
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.CreateNewElement">
            <summary>
            Create a new graph element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the given graph element. Uri is used.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.CollectionType">
            <summary>
            The type of the collection
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.ElementName">
            <summary>
            The name of the element
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.Item(System.Int32)">
            <summary>
            The index operator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.Item(System.String)">
            <summary>
            Get the element by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.ContainsKey(System.String)">
            <summary>
            Test if key exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.GraphCollection.GetEnumerator">
            <summary>
            Get enumerator of collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.Ontology">
            <summary>
            A ontology element
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.Prefix">
            <summary>
            Prefix of this ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.Uri">
            <summary>
            URI of this ontology.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.UriString">
            <summary>
            String representation of the URI.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.KeyElement">
            <summary>
            The key of the element.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.FileSource">
            <summary>
            The location of the ontology file.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.MetadataUri">
            <summary>
            The uri of the metadata graph, only needed for TriG serialisations.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.MetadataUriString">
            <summary>
            The string representation of the metadata graph URI.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.Ontology.ToString">
            <summary>
            String representation of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.Ontology.GetHashCode">
            <summary>
            Overwritten hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.Ontology.Location">
            <summary>
            Get the location of the ontology file source.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection">
            <summary>
            A collection of ontology settings.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.CreateNewElement">
            <summary>
            Create a new ontology configuration element.
            </summary>
            <returns>A new configuration element.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get the key associated with a configuration element.
            </summary>
            <param name="element"></param>
            <returns>URI of the configuration element.</returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.CollectionType">
            <summary>
            Get the configuration element collection type.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.ElementName">
            <summary>
            XML element tag name.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.Item(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location.
            </summary>
            <param name="index">The index location of the System.Configuration.ConfigurationElement to return.</param>
            <returns>The <c>System.Configuration.ConfigurationElement</c> at the specified index.</returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.Item(System.String)">
            <summary>
            Gets the configuration element with the specified identifier.
            </summary>
            <param name="key">The identifier of the System.Configuration.ConfigurationElement to return.</param>
            <returns>The <c>System.Configuration.ConfigurationElement</c> at the specified index.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.ContainsKey(System.String)">
            <summary>
            Indicates if an element with the given key exists in this collection.
            </summary>
            <param name="key">The identifier to be checked.</param>
            <returns><c>true</c> if an element with the given key exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.OntologyCollection.GetEnumerator">
            <summary>
            Get an enumerator for iterating over the items in this collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.RuleSet">
            <summary>
            A ruleset element
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSet.Uri">
            <summary>
            Gets or sets the URI of the rule set.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSet.Graphs">
            <summary>
            Gat a collection of graphs associated with this rule set.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection">
            <summary>
            Collection of rule sets.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.CreateNewElement">
            <summary>
            Create a new rule set element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key (the uri) of a RuleSet element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.CollectionType">
            <summary>
            The collection type.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.ElementName">
            <summary>
            Contains the name of the element.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.Item(System.Int32)">
            <summary>
            The index operator.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.Item(System.String)">
            <summary>
            Index operator with key name.
            </summary>
            <param name="key">The key of the ruleset.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.ContainsKey(System.String)">
            <summary>
            Can be used to test if the key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.Legacy.RuleSetCollection.GetEnumerator">
            <summary>
            Enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.Legacy.VirtuosoStoreSettings">
            <summary>
            Constains Virtuoso specific settings.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.VirtuosoStoreSettings.RuleSets">
            <summary>
            A collection of inference rule sets.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.VirtuosoStoreSettings.Type">
            <summary>
            Get the triple store type identifier.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.Legacy.VirtuosoStoreSettings.Data">
            <summary>
            Get store specific XML configuration data.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Configuration.TrinitySettings">
            <summary>
            Constains the settings for the Semiodesk.Trinity framework.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.TrinitySettings.Namespace">
            <summary>
            Namespace of the generated ontology file.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.TrinitySettings.Ontologies">
            <summary>
            Collection of ontology settings.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Configuration.TrinitySettings.VirtuosoStoreSettings">
            <summary>
            Virtuoso specific triple store settings.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.TrinitySettings.ListOntologies">
            <summary>
            Get the ontology settings for the current project.
            </summary>
            <returns>An enumeration of ontology settings.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Configuration.TrinitySettings.ListStoreConfigurations">
            <summary>
            Get the triple store settings for the current project.
            </summary>
            <returns>An enumeration of triple store settings.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.InvalidQueryException">
            <summary>
            This exception will be thrown if the store rejects the query as invalid.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.InvalidQueryException.Query">
            <summary>
            Contains the offending query 
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.InvalidQueryException.#ctor">
            <summary>
            Create a new exception without information.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.InvalidQueryException.#ctor(System.String)">
            <summary>
            Create a new exception with an error string.
            </summary>
            <param name="message">Details about the issue.</param>
        </member>
        <member name="M:Semiodesk.Trinity.InvalidQueryException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Create a new exception with an error string and an inner exception.
            </summary>
            <param name="message">Details about the issue.</param>
            <param name="innerException">The exception that propmted the query failure.</param>
            <param name="query">The offending query</param>
        </member>
        <member name="T:Semiodesk.Trinity.QueryTypeNotSupportedException">
            <summary>
            This exception will be thrown when trying to access query result methods 
            for unsupported SPARQL query forms (i.e. trying to get bindings from an ASK query).
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.QueryTypeNotSupportedException.QueryType">
            <summary>
            Contains the offending query.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.QueryTypeNotSupportedException.#ctor(Semiodesk.Trinity.SparqlQueryType)">
            <summary>
            Create a new exception with an error string.
            </summary>
            <param name="type">SPARQL query type.</param>
        </member>
        <member name="T:Semiodesk.Trinity.ResourceLockedException">
            <summary>
            Represents error when one or more resources you tried to access was locked.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceLockedException.#ctor(System.Exception)">
            <summary>
            Create a new instance of the <c>ResourceLockedException</c> class.
            </summary>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="T:Semiodesk.Trinity.ResourceNotFoundException">
            <summary>
            Represents error when a resource could not be retrieved.
            </summary>
            <remarks>
            The exception is derived from <c>ArgumentException</c> to ensure backwards compatibility.
            </remarks>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceNotFoundException.#ctor(System.Uri)">
            <summary>
            Create a new instance of the <c>ResourceNotFoundException</c> class.
            </summary>
            <param name="uri">URI of the resource.</param>
        </member>
        <member name="T:Semiodesk.Trinity.StoreProviderMissingException">
            <summary>
            Represents errors when a suitable triple store adapter could not be found.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreProviderMissingException.#ctor(System.String)">
            <summary>
            Create a new instance of the <c>StoreProviderMissingException</c> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreProviderMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of the <c>StoreProviderMissingException</c> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="T:Semiodesk.Trinity.FileSystemInfoExtensions">
            <summary>
            Extension to FileSystemInfo concerting UriRef handling
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.FileSystemInfoExtensions.ToUriRef(System.IO.FileSystemInfo)">
            <summary>
            Create a UriRef from a FileSystemInfo
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.StringExtensions">
            <summary>
            Collection of string extension related to Uris
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StringExtensions.ToUriRef(System.String)">
            <summary>
            Create a UriRef from this string.
            </summary>
            <param name="uriString"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StringExtensions.ToUriRef(System.String,System.UriKind)">
            <summary>
            Create a UriRef from this string with a given kind
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.UriExtensions">
            <summary>
            Extension of Uri class concering UriRef handling.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.UriExtensions.ToUriRef(System.Uri)">
            <summary>
            Create a UriRef from this Uri.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.DataType">
            <summary>
            The datatype of the the mapped property
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.GenericType">
            <summary>
            If the datatype is a collection, this contains the generic type.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.IsList">
            <summary>
            True if the property is mapped to a collection.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.Property">
            <summary>
            The property that should be mapped.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.PropertyName">
            <summary>
            The name of the mapped property.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.IsUnsetValue">
            <summary>
            True if the value has not been set.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.Language">
            <summary>
            Language of the value
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IPropertyMapping.LanguageInvariant">
            <summary>
            The mapping ignores the language setting and is always non-localized. Only valid if type or generic type is string or string collection.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.IsTypeCompatible(System.Type)">
            <summary>
            Method to test if a type is compatible. In case of collection, the containing type is tested for compatibility.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True if the type is compatible</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.GetValueObject">
            <summary>
            Gets the value or values mapped to this property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.SetOrAddMappedValue(System.Object)">
            <summary>
            This method is meant to be called from the non-mapped interface. It replaces the current value if 
            it is mapped to one value, adds it if the property is mapped to a list.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.RemoveOrResetValue(System.Object)">
            <summary>
            Deletes the containing value and sets the state to unset. In case of a collection, it tries to remove the value from it.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.CloneFrom(Semiodesk.Trinity.IPropertyMapping)">
            <summary>
            Clones the mapping of another resource.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Semiodesk.Trinity.IPropertyMapping.Clear">
            <summary>
            Clears the mapping and resets it.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.IResource">
            <summary>
            This interface encapsulates the access to the methods of a RDF resource.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IResource.Uri">
            <summary>
            Uniform Resource Identifier (URI).
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IResource.Model">
            <summary>
            Model from which the resource was instantiated.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IResource.IsReadOnly">
            <summary>
            Indicates that this resource is not writable, thus Commit() is illegal.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IResource.Language">
            <summary>
            Set the language of this resource. This will change te mapped strings to this language.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IResource.IsDisposed">
            <summary>
            Indicates if the resources has been disposed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,Semiodesk.Trinity.IResource)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A instance of IResource.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.String)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A string literal.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A string literal.</param>
            <param name="language">The culture of the string literal.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A string literal.</param>
            <param name="language">The language of the string literal.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Int16)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 16-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Int32)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 32-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Int64)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 64-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.UInt16)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 16-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.UInt32)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 32-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.UInt64)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A 64-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Single)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A single precision float value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Double)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A double precision float value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Decimal)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A decimal value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Boolean)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A boolean value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.DateTime)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">A datetime value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Byte[])">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">Arbitrary data in form of a byte array.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.AddProperty(Semiodesk.Trinity.Property,System.Uri)">
            <summary>
            Adds a new property with the given value to the resource.
            </summary>
            <param name="property">Property the value should be associated with.</param>
            <param name="value">An Uri.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,Semiodesk.Trinity.IResource)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">An IResource instance.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.String)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A instance of IResource.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A string literal.</param>
            <param name="language">The culture of the string</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A string literal.</param>
            <param name="language">The language of the string.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Int16)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 16-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Int32)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 32-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Int64)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 64-bit integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt16)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 16-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt32)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 32-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt64)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A 64-bit unsigned integer value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Single)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A single precision float value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Double)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A double precision float value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Decimal)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A decimal value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Boolean)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A blooean value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.DateTime)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">A date value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Byte[])">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">Arbitrary data in form of a byte array.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.RemoveProperty(Semiodesk.Trinity.Property,System.Uri)">
            <summary>
            Removes an associated property from the resource.
            </summary>
            <param name="property">Property the given value is associated with.</param>
            <param name="value">An Uri.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.HasProperty(Semiodesk.Trinity.Property)">
            <summary>
            Indicates if the resource has at least one property of the given type.
            </summary>
            <param name="property"></param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.HasProperty(Semiodesk.Trinity.Property,System.Object)">
            <summary>
            Indicates if the resource has a property with the given value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.HasProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Indicates if the resource has a property with the given translated string value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="language"></param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.HasProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Indicates if the resource has a property with the given translated string value.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="language"></param>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.ListProperties">
            <summary>
            Enumerates all properties associated with this resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.ListValues(System.Boolean)">
            <summary>
            Enumerates all properties associated with this resource in form 
            of a tuple mapping properties to their corresponding values.
            </summary>
            <param name="forSerialization">Only return values which should be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.ListValues(Semiodesk.Trinity.Property)">
            <summary>
            Enumerates all property values associated with this resource.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.GetValue(Semiodesk.Trinity.Property)">
            <summary>
            Gets the value of a uniquely asserted property.
            </summary>
            <param name="property">A RDF property.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IResource.GetValue(Semiodesk.Trinity.Property,System.Object)">
            <summary>
            Gets the value of a uniquely asserted property.
            </summary>
            <param name="property">A RDF property.</param>
            <param name="defaultValue">Specifies a default value that should be returned if no value exists.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.MappingDiscovery">
            <summary>
            This static class is responsible for discovering mapped classes.
            Every assembly that defines mapping classes needs to register them with this service.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.MappingDiscovery.MappingClass">
            <summary>
            A class containing information about a RDF class mapped to c#.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.MappingClass.MappingClassType">
            <summary>
            The .NET type of the class.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.MappingClass.RdfClasses">
            <summary>
            RDF classes that are mapped to this class.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.MappingClass.RdfBaseClasses">
            <summary>
            Inferenced RDF classes mapped to this class. Currently not used.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.MappingClass.BaseClassCount">
            <summary>
            The number of classes that are not sub class of any other class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.MappingClass.#ctor(System.Type,System.Collections.Generic.IEnumerable{Semiodesk.Trinity.Class},System.Collections.Generic.IEnumerable{Semiodesk.Trinity.Class})">
            <summary>
            Constructor to create a new MappingClass
            </summary>
            <param name="mappingClassType">The c# type</param>
            <param name="rdfClasses">The mapped rdf classes.</param>
            <param name="rdfBaseClasses">The rdf base classes.</param>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.RegisteredAssemblies">
            <summary>
            The list of all registered assemblies.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.MappingDiscovery.MappingClasses">
            <summary>
            The list of all registered mapped classes.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.AddMappingClasses(System.Collections.Generic.IList{System.Type})">
            <summary>
            Adds a collection of mapped classes to the registration.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.AddMappingClass(System.Type)">
            <summary>
            Adds a mapped class to the registration.
            </summary>
            <param name="_class"></param>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.GetBaseTypes(System.Type,System.Collections.Generic.List{Semiodesk.Trinity.Class}@)">
            <summary>
            Add the super classes of a given .NET type to a given list.
            </summary>
            <param name="type">A .NET type.</param>
            <param name="baseTypes">List where the base types will be added to.</param>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.RegisterCallingAssembly">
            <summary>
            Loads all mapped classes from the assembly calling this method.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.RegisterAllCurrentAssemblies">
            <summary>
            Register ALL THE THINGS!!
            from all assemblies currently loaded.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Load all mapped classes from the given assembly.
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.GetMatchingTypes(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.Class},System.Type,System.Boolean)">
            <summary>
            Returns all types which match the given restrictions.
            </summary>
            <param name="classes">List of RDF classes</param>
            <param name="type">A c# type in a inheritence tree. Give Resource if you don't know what to do.</param>
            <param name="inferencingEnabled">Should inferencing be factored in.</param>
        </member>
        <member name="M:Semiodesk.Trinity.MappingDiscovery.GetRdfClasses(System.Type)">
            <summary>
            The the RDF class of a C# type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.IModel">
            <summary>
            An interface for classes which provide functionality to manage a set of resources.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IModel.Uri">
            <summary>
            Uri of this model.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IModel.IsEmpty">
            <summary>
            True if the model is empty.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IModel.IgnoreUnmappedProperties">
            <summary>
            All unampped properties will be ignored for update and thus deleted. 
            This reduces the amount of data thats get sent to the database but also might remove important data.
            Setting this to true essentialy disables the triple API.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.AddResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method.
            </summary>
            <param name="resource">The resource to be added to the model.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>The resource which is now connected to the current model.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.AddResource``1(``0,Semiodesk.Trinity.ITransaction)">
            <summary>
            Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method.
            </summary>
            <param name="resource">The resource to be added to the model.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>The resource which is now connected to the current model.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store.
            </summary>
            <param name="format">The format string from which a globally unique identifier URI should be generated from.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <returns>The newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>The newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource``1(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <typeparam name="T">Type of the resource object. Must be derived from Resource.</typeparam>
            <param name="format">The format string from which a globally unique identifier URI should be generated from.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <typeparam name="T">Type of the resource object. Must be derived from Resource.</typeparam>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource(System.Type,System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <param name="type">The concrete type of the resource. This must be a subclass of resource.</param>
            <param name="format">The format of the resulting uri.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.CreateResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            This method can be used to create a resource of a type which was asserted at runtime.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="t">Type of the resource object. Must be derived from Resource. </param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.Exception">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.DeleteResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Removes the given resource from the model and its backing RDF store. Note that there is no verification
            that the given resource and its stored represenation have identical properties.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">The transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.DeleteResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Removes the given resource from the model and its backing RDF store. Note that there is no verification
            that the given resource and its stored represenation have identical properties.
            </summary>
            <param name="resource">Resource that is to be removed from the model.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.ContainsResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.ContainsResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="resource">Resource that should be looked up in the model.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Execute a SPARQL query against the model.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A SPARQL query result object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.ExecuteUpdate(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Execute a SparqlUpdate against the model.
            </summary>
            <param name="update">A sparql update object.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResource``1(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="resource">The instance of IResource to be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="type">The type the resource should have.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="resource">The instance of IResource to be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResources(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResources``1(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetResources``1(System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Returns a enumeration of all resources that match the given type.
            </summary>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.AsQueryable``1(System.Boolean)">
            <summary>
            Returns a queryable object that can be used to build LINQ statements.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.GetBindings(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.Read(System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Imports the contents of a model located by the given URL. The method supports
            importing files and other models stored in the local RDF store. 
            </summary>
            <param name="url">A uniform resource locator.</param>
            <param name="format">The serialization format.</param>
            <param name="update">True to update the model, false to replace the data.</param>
            <returns>True if the contents of the model were imported, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.Read(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Imports the contents of a graph serialized in the stream to this model.
            </summary>
            <param name="stream">The stream containing the serialization</param>
            <param name="format">Format of the serialization</param>
            <param name="update">True to update the model, false to replace the data.</param>
            <returns>True if the contents of the model were imported, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.Write(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Serializes the contents of the model and provides a memory stream.
            </summary>
            <param name="fs">The file stream to write to.</param>
            <param name="format">The serialization format.</param>
            <returns>A serialization of the models contents.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.UpdateResource(Semiodesk.Trinity.Resource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Updates a resource with it's current state in the model.
            </summary>
            <param name="resource"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.Clear">
            <summary>
            Removes all elements from the model.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IModel.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a transaction which can be used to group more queries together to be executed as one.
            </summary>
            <param name="isolationLevel">Isolation level used to lock the database.</param>
            <returns>A handle to the transaction.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.IModelEqualityComparer">
            <summary>
            Compares two models by their uris
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IModelEqualityComparer.Equals(Semiodesk.Trinity.IModel,Semiodesk.Trinity.IModel)">
            <summary>
            Equals
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IModelEqualityComparer.GetHashCode(Semiodesk.Trinity.IModel)">
            <summary>
            HashCode
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.IModelGroup">
            <summary>
            The model group can be used to query over multiple models at once.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IModelGroup.DefaultModel">
            <summary>
            The default model of this group
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Model">
            <summary>
            A set of resources which represent a logical model for a given application domain.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Model.Uri">
            <summary>
            The Uniform Resource Identifier which provides a name for the model.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Model.IsEmpty">
            <summary>
            Indicates if the model contains statements.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Model.IgnoreUnmappedProperties">
            <summary>
            All unampped properties will be ignored for update and thus deleted. 
            This reduces the amount of data thats get sent to the database but also might remove important data.
            Setting this to true essentialy disables the triple API.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Model.#ctor(Semiodesk.Trinity.IStore,Semiodesk.Trinity.UriRef)">
            <summary>
            This constructor is intended to be used only be the ModelManager.
            </summary>
            <param name="store">The underlying triple store implementation to be used.</param>
            <param name="uri">Uniform Resource Identifier of the model.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Model.Clear">
            <summary>
            Removes all elements from the model.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Model.AddResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method.
            </summary>
            <param name="resource">The resource to be added to the model.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>The resource which is now connected to the current model.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.AddResource``1(``0,Semiodesk.Trinity.ITransaction)">
            <summary>
            Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method.
            </summary>
            <param name="resource">The resource to be added to the model.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>The resource which is now connected to the current model.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <param name="format">The format of the resulting uri.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>The newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource``1(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <typeparam name="T">Type of the resource object. Must be derived from Resource.</typeparam>
            <param name="format">The format of the resulting uri.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <typeparam name="T">Type of the resource object. Must be derived from Resource.</typeparam>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource(System.Type,System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            </summary>
            <param name="t">Type of the resource object. Must be derived from Resource.</param>
            <param name="format">The format of the resulting uri.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.CreateResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type.
            This method can be used to create a resource of a type which was asserted at runtime.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="t">Type of the resource object. Must be derived from Resource. </param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given object type wrapping the newly created resource.</returns>
            <exception cref="T:System.Exception">Throws ArgumentException if a resource with the given URI already exists in the model.</exception>
        </member>
        <member name="M:Semiodesk.Trinity.Model.DeleteResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Removes the given resource from the model and its backing RDF store. Note that there is no verification
            that the given resource and its stored representation have identical properties.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Model.DeleteResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Removes the given resource from the model and its backing RDF store. Note that there is no verification
            that the given resource and its stored representation have identical properties.
            </summary>
            <param name="resource">A resource object.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Model.UpdateResource(Semiodesk.Trinity.Resource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Updates the properties of a resource in the backing RDF store.
            </summary>
            <param name="resource">Resource that is to be updated in the backing store.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Model.ContainsResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.ContainsResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="resource">A resource object.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Execute a SPARQL Query.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Indicate that this query should work with enabled inferencing.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A SparqlQueryResults object in any case.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.ExecuteUpdate(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Execute a SPARQL Update.
            </summary>
            <param name="update">A SparqlUpdate object.</param>
            <param name="transaction">Transaction associated with this action.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="resource">The instance of IResource to be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResource``1(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="resource">The resource that should be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            This method can be used for runtime asserted types.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="type">Type of the resource object. Must be derived from Resource.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An instance of the given resource object type, Null otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResources(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">The SparqlQuery object that should be executed.</param>
            <param name="inferenceEnabled">Indicate that this query should work with enabled inferencing.</param>
            <param name="transaction">transaction associated with this action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResources``1(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources. 
            Provides a resource object of the given type.
            </summary>
            <param name="query">The SparqlQuery object that should be executed.</param>
            <param name="inferenceEnabled">Indicate that this query should work with enabled inferencing.</param>
            <param name="transaction">transaction associated with this action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetResources``1(System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Returns a enumeration of all resources that match the given type.
            </summary>
            <param name="inferenceEnabled">Indicate that this query should work with enabled inferencing.</param>
            <param name="transaction">transaction associated with this action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.AsQueryable``1(System.Boolean)">
            <summary>
            TODO
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.GetBindings(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL-select query and provides a list of binding sets. This method 
            implements transparent type marshalling and delivers the bound variables in C#
            native data types.
            </summary>
            <param name="query">A SPARQL-select query which results in a set of bound variables.</param>
            <param name="inferenceEnabled">Indicate that this query should work with enabled inferencing.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>An enumeration of bound variables that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.Write(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Exports the contents of the model and provides a memory stream.
            </summary>
            <param name="fs">File stream to write to.</param>
            <param name="format">The serialization format. <see cref="T:Semiodesk.Trinity.RdfSerializationFormat"/></param>
            <returns>A serialization of the models contents.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.Read(System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Imports the contents of a model located by the given URL. The method supports
            importing files and other models stored in the local RDF store. The location
            of the model is determined by the URI scheme.
            </summary>
            <param name="url">A uniform resource locator.</param>
            <param name="format">Serialization format <see cref="T:Semiodesk.Trinity.RdfSerializationFormat"/></param>
            <param name="update">Pass false if you want to overwrite existing data. True if you want to keep the data and add the new entries.</param>
            <returns>True if the contents of the model were imported, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.Read(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Reads model contents from a stream. The method supports importing files and other models stored in the local RDF store.
            </summary>
            <param name="stream">A stream.</param>
            <param name="format">Serialization format <see cref="T:Semiodesk.Trinity.RdfSerializationFormat"/></param>
            <param name="update">Pass false if you want to overwrite existing data. True if you want to keep the data and add the new entries.</param>
            <returns>True if the contents of the model were imported, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Model.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a transaction which can be used to group more queries together to be executed as one.
            </summary>
            <param name="isolationLevel">Isolation level used to lock the database.</param>
            <returns>A handle to the transaction.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.ModelGroup">
            <summary>
            Implementation of the IModelGroup interface.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.IgnoreUnmappedProperties">
            <summary>
            All unampped properties will be ignored for update and thus deleted. 
            This reduces the amount of data thats get sent to the database but also might remove important data.
            Setting this to true essentialy disables the triple API.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.DefaultModel">
            <summary>
            The default model of this group.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.Uri">
            <summary>
            Uri of the model group is null.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.IsEmpty">
            <summary>
            Tests if all contained models are empty.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.#ctor(Semiodesk.Trinity.IStore,System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Create a new model group from a store and a collection of models
            </summary>
            <param name="store">A store</param>
            <param name="models">A collection of models belonging to that store.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.#ctor(Semiodesk.Trinity.IStore,Semiodesk.Trinity.IModel[])">
            <summary>
            Create a new model group from a store and a collection of models
            </summary>
            <param name="store">A store</param>
            <param name="models">A set of models belonging to that store.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.AddResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="resource"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.AddResource``1(``0,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="format"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="uri"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource``1(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource(System.Type,System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="t"></param>
            <param name="format"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CreateResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="uri"></param>
            <param name="t"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.DeleteResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="uri"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.DeleteResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="resource"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.UpdateResource(Semiodesk.Trinity.Resource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="resource"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Clear">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.ExecuteUpdate(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="update"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Read(System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Not supported. ModelGroups are read-only.
            </summary>
            <param name="url"></param>
            <param name="format"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.ContainsResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.ContainsResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Indicates wheter a given resource is part of the model.
            </summary>
            <param name="resource">Resource that should be looked up in the model.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>True if the resource is part of the model, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Execute a SPARQL query against the model.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A SPARQL query result object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResource(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResource(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="resource">The instance of IResource to be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResource``1(System.Uri,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="uri">A Uniform Resource Identifier.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResource``1(Semiodesk.Trinity.IResource,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model. Provides a resource object of the given type.
            </summary>
            <param name="resource">The instance of IResource that is to be retrieved.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <typeparam name="T">The type of the resource.</typeparam>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResource(System.Uri,System.Type,Semiodesk.Trinity.ITransaction)">
            <summary>
            Retrieves a resource from the model.
            </summary>
            <param name="uri">The uri of the resource that is to be retrieved.</param>
            <param name="type">The type the resource should have.</param>
            <param name="transaction">Transaction associated with this action.</param>
            <returns>A resource with all asserted properties.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResources(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResources``1(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetResources``1(System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Returns a enumeration of all resources that match the given type.
            </summary>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.AsQueryable``1(System.Boolean)">
            <summary>
            TODO
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetBindings(Semiodesk.Trinity.ISparqlQuery,System.Boolean,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SPARQL query and provides an enumeration of matching resources.
            </summary>
            <param name="query">A SparqlQuery object.</param>
            <param name="inferenceEnabled">Modifier to enable inferencing. Default is false.</param>
            <param name="transaction">Transaction associated with the action.</param>
            <returns>An enumeration of resources that match the given query.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Write(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Serializes the contents of the model and provides a memory stream.
            </summary>
            <param name="fs">The file stream to write to.</param>
            <param name="format">The serialization format.</param>
            <returns>A serialization of the models contents.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Read(System.IO.Stream,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Imports the contents of a graph serialized in the stream to this model.
            </summary>
            <param name="stream">The stream containing the serialization</param>
            <param name="format">Format of the serialization</param>
            <param name="update">True to update the model, false to replace the data.</param>
            <returns>True if the contents of the model were imported, False if not.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Add(Semiodesk.Trinity.IModel)">
            <summary>
            Add another model to the model group.
            </summary>
            <param name="item">The model to add</param>
            <returns>true if the element is added to the model group false if the element is already present</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.ExceptWith(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Removes all elements in the specified collection from the model group.
            </summary>
            <param name="other">The collection of models to remove.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.IntersectWith(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Modifies the model group to contain only elements that are present in the current group and the specified collection.
            </summary>
            <param name="other">The collection to compare.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.IsProperSubsetOf(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Determines whether the model group is a subset of the given collection.
            </summary>
            <param name="other">The collection to compare.</param>
            <returns>true if the model group is a subset; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.IsProperSupersetOf(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Determines whether the model group is a superset of the given collection.
            </summary>
            <param name="other">The collection to compare</param>
            <returns>true if the model group is a superset; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.IsSubsetOf(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Determines whether the model group is a subset of the given collection.
            </summary>
            <param name="other">The collection to compare.</param>
            <returns>true if the model group is a subset; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.IsSupersetOf(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
             Determines whether the model group is a superset of the given collection.
            </summary>
            <param name="other">The collection to compare.</param>
            <returns>>true if the model group is a superset; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Overlaps(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Determines wether the model group and the given collection share common models.
            </summary>
            <param name="other">The collection to compare.</param>
            <returns>true if the model group shares common models; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.SetEquals(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
             Determines wether the model group and the given collection contain the same elements.
            </summary>
            <param name="other">The collection to compare.</param>
            <returns>true if the collections is equal; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.SymmetricExceptWith(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Modifies the mode group to contain only elements either present in that object or the given collection, but not both.
            </summary>
            <param name="other">The collection to compare.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.UnionWith(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
             Modifies the mode group to contain both elements present in that object and the given collection.
            </summary>
            <param name="other">The collection to compare.</param>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Contains(Semiodesk.Trinity.IModel)">
            <summary>
            Determines if the model group contains the given model.
            </summary>
            <param name="item">The model to locate.</param>
            <returns>true if the model exists in the group; otherwise, false.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.CopyTo(Semiodesk.Trinity.IModel[],System.Int32)">
            <summary>
            Copies the given models in the group starting at the specified index.
            </summary>
            <param name="array">The models to copy.</param>
            <param name="arrayIndex">The array index</param>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.Count">
            <summary>
            Returns the number of models in the group.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ModelGroup.IsReadOnly">
            <summary>
            Returns if the group is read only.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.Remove(Semiodesk.Trinity.IModel)">
            <summary>
            Removes a model from the group.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.GetEnumerator">
            <summary>
            Enumerator of the models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ModelGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator of the models
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Ontology">
            <summary>
            Abstract class which marks subclasses as ontologies. Needed for automatic discovery.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.OntologyDiscovery">
            <summary>
            This static class contains a mapping of all properties and classes to its uris for discovery of the proper object and its attributes.
            For future reference: look into PreApplicationStartMethodAttribute Class or ModuleInitializer
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.OntologyDiscovery.Namespaces">
            <summary>
            All registered RDF ontology prefixes in the current application.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.OntologyDiscovery.Properties">
            <summary>
            All registered RDF properties in the current application.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.OntologyDiscovery.Classes">
            <summary>
            All registered RDF classes in the current application.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.AddNamespace(System.String,System.Uri)">
            <summary>
            Register a namespace with a prefix.
            </summary>
            <param name="prefix">A namespace prefix.</param>
            <param name="uri">A uniform resource identifier.</param>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Register an assembly to search for RDF ontologies.
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.RegisterCallingAssembly">
            <summary>
            Register the calling assembly to search for RDF ontologies.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.AddOntologies(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.Ontology})">
            <summary>
            Register the concepts from a given set of ontologies.
            </summary>
            <param name="ontologies">An enumeration of ontologies.</param>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.GetProperty(System.Uri)">
            <summary>
            Returns a a property with the given Uri. Creates a new one if it doesn't exist.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.OntologyDiscovery.GetProperty(System.String)">
            <summary>
            Returns a a property with the given string. Creates a new one if it doesn't exist.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Property">
            <summary>
            Objects of this class represent RDF properties.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Property.#ctor(System.Uri)">
            <summary>
            Constructor taking a Uri parameter
            </summary>
            <param name="uri">Uri of the property</param>
        </member>
        <member name="M:Semiodesk.Trinity.Property.#ctor(Semiodesk.Trinity.UriRef)">
            <summary>
            Constructor taking a UriRef parameter
            </summary>
            <param name="uri">Uri of the property</param>
        </member>
        <member name="M:Semiodesk.Trinity.Property.Equals(System.Object)">
            <summary>
            Determines wheter the URIs of the compared objects are equal.
            </summary>
            <param name="other">The object to be compared.</param>
            <returns><c>true</c> if the URIs of the compared objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Property.GetHashCode">
            <summary>
            Returns the hash code of the objects URI.
            </summary>
            <returns>A hash code string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.PropertyMapping`1">
            <summary>
            This class does the heavy lifting of the property mapping mechanism. It stores the value and acts as intermediary for the resource.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Semiodesk.Trinity.PropertyMapping`1._value">
            <summary>
            The value of the mapped property.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.PropertyMapping`1._dataType">
            <summary>
            The datatype of the the mapped property.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#DataType">
            <summary>
            The datatype of the the mapped property.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.PropertyMapping`1._genericType">
            <summary>
            If the datatype is a collection, this contains the generic type.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#GenericType">
            <summary>
            If the datatype is a collection, this contains the generic type.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.PropertyMapping`1._isList">
            <summary>
            True if the property is mapped to a collection.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#IsList">
            <summary>
            True if the property is mapped to a collection.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.PropertyMapping`1._isUnsetValue">
            <summary>
            True if the value has not been set.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#IsUnsetValue">
            <summary>
            True if the value has not been set.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Language">
            <summary>
            Language of the value.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#Property">
            <summary>
            Gets the mapped RDF property.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.PropertyUri">
            <summary>
            Gets the URI of the mapped RDF property.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.PropertyName">
            <summary>
            Gets the name of the mapped .NET property.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.PropertyMapping`1.LanguageInvariant">
            <summary>
            Only valid if type or generic type is string. The mapping ignores the language setting and is always non-localized.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.#ctor(System.String,Semiodesk.Trinity.Property,System.Boolean)">
            <summary>
            Creates a new property mapping.
            </summary>
            <param name="propertyName">Name of the property in the class</param>
            <param name="property">The RDF property that should be mapped</param>
            <param name="languageInvariant">This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.#ctor(System.String,Semiodesk.Trinity.Property,`0,System.Boolean)">
            <summary>
            Creates a new property mapping.
            </summary>
            <param name="propertyName">Name of the property in the class</param>
            <param name="property">The RDF property that should be mapped</param>
            <param name="defaultValue">The default value used to initialize this property</param>
            <param name="languageInvariant">This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new property mapping.
            </summary>
            <param name="propertyName">Name of the property in the class</param>
            <param name="propertyUri">The URI of the RDF property that should be mapped</param>
            <param name="languageInvariant">This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.#ctor(System.String,System.String,`0,System.Boolean)">
            <summary>
            Creates a new property mapping.
            </summary>
            <param name="propertyName">Name of the property in the class</param>
            <param name="propertyUri">The URI of the RDF property that should be mapped</param>
            <param name="defaultValue">The default value used to initialize this property</param>
            <param name="languageInvariant">This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.SetValue(`0)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.GetValue">
            <summary>
            Returns the property value.
            </summary>
            <returns>The value, if any.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#SetOrAddMappedValue(System.Object)">
            <summary>
            Sets a single literal value or adds a value to a property mapped to a value collection.
            </summary>
            <remarks>
            This method is meant to be called from the non-mapped interface. It replaces the current value if 
            it is mapped to one value, adds it if the property is mapped to a list.
            </remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#RemoveOrResetValue(System.Object)">
            <summary>
            Deletes the containing value and sets the state to unset. In case of a collection, it tries to remove the value from it.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#GetValueObject">
            <summary>
            Gets the value or values mapped to this property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.ToLanguageList">
            <summary>
            Gets a list of strings as list of tuples containing the values and the language tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#IsTypeCompatible(System.Type)">
            <summary>
            Method to test if a type is compatible. In case of collection, the containing type is tested for compatibility.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True if the type is compatible</returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.IsNumericType(System.Type)">
            <summary>
            Indicates if the mapped value is a numeric type.
            </summary>
            <param name="type">A .NET type object.</param>
            <returns><c>true</c> if the type is numeric, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.IsPrecisionCompatible(System.Type,System.Type)">
            <summary>
            Indicates if the precision of a numeric target type is greater or equal to a given source type.
            </summary>
            <param name="source">The source type.</param>
            <param name="target">The target type.</param>
            <returns><c>true</c> if the types are precision compatible, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#CloneFrom(Semiodesk.Trinity.IPropertyMapping)">
            <summary>
            Clones the mapping of another resource.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Semiodesk.Trinity.PropertyMapping`1.Semiodesk#Trinity#IPropertyMapping#Clear">
            <summary>
            Clears the mapping and resets it.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.BindingSet">
            <summary>
            A dictionary of named value bindings which represents a single query solution.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.ISparqlQuery">
            <summary>
            Exposes a SPARQL query.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ISparqlQuery.Model">
            <summary>
            The model on which the query will be run.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ISparqlQuery.QueryType">
            <summary>
            The type of the query.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ISparqlQuery.IsInferenceEnabled">
            <summary>
            Indicates if inference should be enabled. It depends on the underlying store if and how this is used.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.Bind(System.String,System.Object)">
            <summary>
            Bind parameters to specified values.
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.GetDeclaredPrefixes">
            <summary>
            Returns all prefixes that were specified by the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.GetDefaultModels">
            <summary>
            Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level.
            </summary>
            <returns>An enumeration of URI strings.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.GetGlobalScopeVariableNames">
            <summary>
            Get an array of all variable names that are defined in the root scope of the query.
            </summary>
            <returns>An array of avaiable names without the preceding '$' or '?' characters, if any.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.GetRootGraphPattern">
            <summary>
            Get the root graph pattern.
            </summary>
            <returns>A non empty string, on success.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.GetRootOrderByClause">
            <summary>
            Gets the outermost ORDER BY clause.
            </summary>
            <returns>A non empty string if a ORDER BY clause is defined.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.ProvidesStatements">
            <summary>
            Indicates if the query selects variables that are used as subject, predicate and object in a triple pattern.
            </summary>
            <returns><c>true</c> if the query selects triples, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQuery.ToString">
            <summary>
            Returns the string representation of the query.
            </summary>
            <returns>The SPARQL query string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.ISparqlQueryResult">
            <summary>
            Exposes the results of a SPARQL query.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.Count">
            <summary>
            Number of items in the result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetResources(System.Int32,System.Int32)">
            <summary>
            Enumerate the resource objects in the result.
            </summary>
            <param name="offset"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetResources``1(System.Int32,System.Int32)">
            <summary>
            Enumerate the resource objects of a given type in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="offset"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetAnwser">
            <summary>
            Returns the bool value from ASK query forms.
            </summary>
            <returns>True on success, False otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetResources">
            <summary>
            Returns marshalled Resource objects returned from DESCRIBE, CONSTRUCT 
            or interpretable SELECT query forms.
            </summary>
            <returns>An enumeration of Resource objects.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetResources``1">
            <summary>
            Returns marshalled instances of the given Resource type which were 
            returned from DESCRIBE, CONSTRUCT or interpretable SELECT query forms.
            </summary>
            <typeparam name="T">The Resource type object.</typeparam>
            <returns>An enumeration of instances of the given type.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ISparqlQueryResult.GetBindings">
            <summary>
            Returns a set of bound values (bindings) returned from SELECT query forms.
            </summary>
            <returns>An enumeration of bound solution variables (BindingSet).</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.ConstantExpressionExtensions">
            <summary>
            Extensions for the <c>ConstantExpression</c> type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.AsSparqlExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert the expression into a <c>ConstantTerm</c>.
            </summary>
            <param name="constant">A constant expression.</param>
            <returns>A <c>ConstantTerm</c> object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.AsIriExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert the expression into a <c>IriExpression.</c>
            </summary>
            <param name="constant">A constant expression.</param>
            <returns>A <c>IriExpression</c> object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.AsLiteralExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert the expression into a <c>LiteralExpression</c>.
            </summary>
            <param name="constant">A constant expression.</param>
            <returns>A <c>LiteralExpression</c> object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.AsNumericExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert the expression into a numeric expression.
            </summary>
            <param name="constant">A constant expression.</param>
            <returns>A <c>NumericExpression</c> object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.AsNode(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Convert the expression into a node.
            </summary>
            <param name="constant">A constant expression.</param>
            <returns>A <c>Node</c> object.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ConstantExpressionExtensions.IsNullOrFalse(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Indicates if the expression can be evaluated to <c>false</c>.
            </summary>
            <param name="constant">A constant expression.</param>
            <returns><c>true</c> if the value is either <c>null</c> or <c>false</c>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.ExpressionExstensions.ContainsOrEquals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Indicate if an expression contains antoher or is equal to it.
            </summary>
            <param name="expression">An expression.</param>
            <param name="e">Expression to be evaluated.</param>
            <returns><c>true</c> if <c>e</c> is equal to the given expression or one of its query sources, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.MemberInfoExtensions">
            <summary>
            Extensions for the <c>MemberInfo</c> type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MemberInfoExtensions.TryGetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first custom attribute of a specified type which is attached to a class member.
            </summary>
            <typeparam name="TAttribute">Custom attribute type.</typeparam>
            <param name="member">A class member.</param>
            <returns>A custom attribute object on success, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MemberInfoExtensions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Get the .NET type of the given class member.
            </summary>
            <param name="member">A class member.</param>
            <returns>The class member type.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MemberInfoExtensions.IsUriType(System.Reflection.MemberInfo)">
            <summary>
            Indicates if the given member is of type <c>Uri</c> or a sub type.
            </summary>
            <param name="member">A class member.</param>
            <returns><c>true</c> if the member can be represented by a URI, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MemberInfoExtensions.IsBuiltInCall(System.Reflection.MemberInfo)">
            <summary>
            Indicates if the given member is a built-in call.
            </summary>
            <param name="member">A class member.</param>
            <returns><c>true</c> if the class member is a built-in call, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.MethodCallExpressionExtensions">
            <summary>
            Extensions for the <c>MethodCall</c> type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MethodCallExpressionExtensions.HasArgumentValue(System.Linq.Expressions.MethodCallExpression,System.Int32,System.Object)">
            <summary>
            Indicates if the method call has an argument with a specified value at a specified location.
            </summary>
            <param name="expression">A method call expression.</param>
            <param name="index">Location of the argument.</param>
            <param name="value">Value of the argument.</param>
            <returns><c>true</c> if the method call has an argument with the given value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MethodCallExpressionExtensions.HasArgumentValueFromAlternatives(System.Linq.Expressions.MethodCallExpression,System.Int32,System.Object[])">
            <summary>
            Indicates if the method call has an argument at a speficied loaction with one of the specified values.
            </summary>
            <param name="expression">A method call expression.</param>
            <param name="index">Location of the argument.</param>
            <param name="values">Values of the argument.</param>
            <returns><c>true</c> if the method call has an argument with one of the given values, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MethodCallExpressionExtensions.GetArgumentValue``1(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>
            Get the value of an argument at the specified location.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="expression">A method call expression.</param>
            <param name="index">Argument location.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.MethodCallExpressionExtensions.GetArgumentValue``1(System.Linq.Expressions.MethodCallExpression,System.Int32,``0)">
            <summary>
            Get the value of an argument at the specified location.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="expression">A method call expression.</param>
            <param name="index">Argument location.</param>
            <param name="defaultValue">Value to be returned if no argument is specified at the given location.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.NodeFactoryExtensions">
            <summary>
            Extension for the <c>NodeFactory</c> type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Query.NodeFactoryExtensions.CreateLiteralNode(VDS.RDF.NodeFactory,System.Boolean)">
            <summary>
            Create a boolean literal value.
            </summary>
            <param name="factory">A node factory.</param>
            <param name="value">Value of the literal node.</param>
            <returns>A new literal node object.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.SelectBindingsQueryGenerator">
            <summary>
            Generates SELECT queries which return binding sets.
            </summary>
            <remarks>
            This class is intended to be used as a root query generator. For generating SELECT queries
            for sub-queries, refer to <c>SubSelectQueryGenerator</c>.
            </remarks>
        </member>
        <member name="M:Semiodesk.Trinity.Query.SparqlQueryGenerator.BuildMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Builds the triples required to access a given member and accociates its value with a variable.
            </summary>
            <param name="memberExpression">The member to be accessed.</param>
            <returns>The object variable associated with the member value.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Query.SparqlQueryGenerator.BuildMemberAccessOptional(System.Linq.Expressions.MemberExpression)">
            <summary>
            Builds the triples required to access a given member and accociates its value with a variable.
            </summary>
            <param name="memberExpression">The member to be accessed.</param>
            <returns>The object variable associated with the member value.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Query.SparqlQueryModelVisitor`1">
            <summary>
            Generates a SPARQL query from a LINQ query model by visiting all clauses and invoking 
            expression implementation using a <c>ExpressionTreeVisitor</c>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="F:Semiodesk.Trinity.Query.SparqlQueryModelVisitor`1.QueryGeneratorTree">
            <summary>
            Allows to access query generators and sub query generators in a tree-like fashion.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Query.SparqlQueryModelVisitor`1.ExpressionVisitor">
            <summary>
            Visits all expressions in a query model and handles the query generation.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Query.SparqlVariableGenerator.TryGetSubjectVariable(System.Linq.Expressions.Expression)">
            <summary>
            Get a variable from an expression that can be used as a subject in triple patterns and represents resources.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlPreprocessor">
            <summary>
            A simple SPARQL parser.
            </summary>
            <remarks>
            This class is primarily intended to support a limited range of query 
            preprocessing tasks such as setting the values of query parameters (@-variables)
            as quickly as possible. It does not aim to support the full SPARQL standard syntax.
            </remarks>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.Tokens">
            <summary>
            We use the list of tokens to generate the query string with bound parameters on demand.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.PreviousTokenType">
            <summary>
            Type of the last read token.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.DefaultGraphs">
            <summary>
            URIs of the graphs queried or manipulated by the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.DeclaredPrefixes">
            <summary>
            Namespace prefixes defined in the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.UsedPrefixes">
            <summary>
            Namespace prefixes referenced in the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.Parameters">
            <summary>
            Names of the bindable query parameters starting with '@'.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.ParameterValues">
            <summary>
            Bound literal values of the query parameters.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlPreprocessor.ParameterTypes">
            <summary>
            Token types of the query parameters.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.#ctor(System.IO.TextReader,VDS.RDF.Parsing.SparqlQuerySyntax)">
            <summary>
            Creates a new instance of the <c>SparqlPreprocessor</c> class.
            </summary>
            <param name="input">A text reader.</param>
            <param name="syntax">SPARQL syntax level.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.Process(System.Boolean)">
            <summary>
            Starts analyzing the SPARQL query.
            </summary>
            <param name="declarePrefixes">Trz to add prefix definitions for the namespaces used but not declared in the query.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.GetNextToken">
            <summary>
            Gets the next parseable Token from the Input or raises an Error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.AddDefaultGraph(System.Uri)">
            <summary>
            Add FROM definition to the query.
            </summary>
            <param name="uri">URI of the graph.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.AddNamedGraph(System.Uri)">
            <summary>
            Add a FROM NAMED definition to the query.
            </summary>
            <param name="uri">URI of the graph.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.GetPrefixDeclarations">
            <summary>
            Gets the PREFIX definitions in the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.Bind(System.String,System.Object)">
            <summary>
            Set the value for a query parameter which is preceeded by '@'.
            </summary>
            <param name="parameter">The parameter name including the '@'.</param>
            <param name="value">The paramter value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.Serialize(System.Int32)">
            <summary>
            Return the query with all bound variables.
            </summary>
            <param name="outputLevel">Level of the sub graph to be returned (0 := entire query).</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlPreprocessor.ToString">
            <summary>
            Returns the entire query string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlQueryVariableScope">
            <summary>
            Graph pattern scope of variables defined in a SPARQL query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryVariableScope.Global">
            <summary>
            A variable accessible in all levels of the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryVariableScope.Default">
            <summary>
            A locally accessible variable.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlQuery">
            <summary>
            A simple SPAQL Query class. This class aims to ease formulating SPARQL
            query strings by automatically setting PREFIX declarations from a given
            namespace manager.
            </summary>
            <see href="http://www.w3.org/TR/rdf-sparql-query/#grammar"/>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQuery._query">
            <summary>
            Cached version of the query string.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQuery._isModified">
            <summary>
            Indicates if a query parameter value has been changed and the cached query string needs to be regenerated.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQuery._preprocessor">
            <summary>
            The SPARQL query processor used to determine the prefixes and statement variables in the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQuery._globalScopeVariableNames">
            <summary>
            Names of the globally defined variables without the preceding '?'.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQuery._model">
            <summary>
            The default model of the Query, if there is excactly one.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQuery.Model">
            <summary>
            Get or set the model used for this query.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQuery.QueryType">
            <summary>
            The query form as defined in http://www.w3.org/TR/rdf-sparql-query/#QueryForms
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQuery.IsInferenceEnabled">
            <summary>
            Indicates if the query result should be expanded using run-time inferencing.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SPARQL query. If enabled, the PREFIXES used in any of the query's graph patterns will
            be declared in the query header if they are found in the application config. Additionally, the query 
            may be compacted in order to reduce processing overhead when being used repeatedly in loops.
            </summary>
            <param name="queryString">The SPARQL query string.</param>
            <param name="declarePrefixes">Set to <c>true</c> if the namespace prefixes used in the query should be declared.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.ProvidesStatements">
            <summary>
            Indicates if the query provides a description of one or more resources.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.Bind(System.String,System.Object)">
            <summary>
            Set the value for a query parameter which is preceeded by '@'.
            </summary>
            <param name="parameter">The parameter name including the '@'.</param>
            <param name="value">The paramter value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.GetDefaultModels">
            <summary>
            Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level.
            </summary>
            <returns>An enumeration of URI strings.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.GetDeclaredPrefixes">
            <summary>
            Returns all prefixes that were specified by the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.GetGlobalScopeVariableNames">
            <summary>
            Gets the names of all variables which are defined in the root graph pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.GetRootGraphPattern">
            <summary>
            Gets the entire query as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.GetRootOrderByClause">
            <summary>
            Indicates if the query contains an ORDER BY clause in any of its graph patterns.
            </summary>
            <returns><c>true</c> if the query contains an ORDER BY clause, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.SetLimit(System.Int32)">
            <summary>
            Adds a LIMIT &lt;int&gt; clause to the query in order to restrict it to put an upper bound on the number of solutions returned. 
            </summary>
            <param name="limit">The number of return values.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.SetOffset(System.Int32)">
            <summary>
            Adds an Offset &lt;int&gt; clause to the query which causes the solutions generated to start after the specified number of solutions. 
            </summary>
            <param name="offset">The number of entries to skip.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQuery.ToString">
            <summary>
            Returns the query string with generated prefixes and subsituted parameters.
            </summary>
            <returns>A valid SPARQL string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlQueryType">
            <summary>
            The SPARQL query forms as specified in http://www.w3.org/TR/rdf-sparql-query/#QueryForms
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryType.Unknown">
            <summary>
            The SPARQL query type could not be determined.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryType.Ask">
            <summary>
            The ASK query form.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryType.Construct">
            <summary>
            The CONSTRUCT query form.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryType.Describe">
            <summary>
            The DESCRIBE query form.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryType.Select">
            <summary>
            The SELECT query form.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlQueryPreprocessor">
            <summary>
            A preprocsesor for SPARQL queries.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQueryPreprocessor.QueryType">
            <summary>
            The SPARQL query form, i.e. ASK, DESCRIBE, SELECT, CONSTRUCT.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQueryPreprocessor.QueryProvidesStatements">
            <summary>
            Indicates if the query returns triples.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryPreprocessor.GlobalScopeVariables">
            <summary>
            Variables visible in the query root scope.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlQueryPreprocessor.InScopeVariables">
            <summary>
            Variables only visible in local scope.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlQueryPreprocessor.IsOrdered">
            <summary>
            Indicates if the query has an ORDER BY solution modifier.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.#ctor(System.IO.TextReader,VDS.RDF.Parsing.SparqlQuerySyntax)">
            <summary>
            Create a new instance of the <c>SparqlQueryPreprocessor</c> class.
            </summary>
            <param name="input">A text reader.</param>
            <param name="syntax">SPARQL syntax level.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.GetNextToken">
            <summary>
            Gets the next token in the query and advance the reader position.
            </summary>
            <returns>A SPARQL token.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.SetLimit(System.Int32)">
            <summary>
            Adds a LIMIT clause to the query in order to restrict it to put an upper bound on the number of solutions returned. 
            </summary>
            <param name="limit">The number of return values.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.SetOffset(System.Int32)">
            <summary>
            Adds an OFFSET clause to the query which causes the solutions generated to start after the specified number of solutions. 
            </summary>
            <param name="offset">The number of return values.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.GetRootGraphPattern">
            <summary>
            Get the entire SPARQL query string.
            </summary>
            <returns>A SPARQL query string.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlQueryPreprocessor.GetOrderByClause">
            <summary>
            Get the ORDER BY clause.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlSerializer">
            <summary>
            Provides functionality to perform serialization of native .NET types into SPARQL strings.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeString(System.String)">
            <summary>
            Serializes a string and excapes special characters.
            </summary>
            <param name="str">A string literal.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeTranslatedString(System.String,System.String)">
            <summary>
            Serializes a string with a translation
            </summary>
            <param name="str">A string literal.</param>
            <param name="lang">A language tag.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeTypedLiteral(System.Object,System.Uri)">
            <summary>
            Serializes a typed literal.
            </summary>
            <param name="obj">A value.</param>
            <param name="typeUri">A type URI.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeValue(System.Object)">
            <summary>
            Serializes a value depdening on its type.
            </summary>
            <param name="obj">An object.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeDateTime(System.DateTime)">
            <summary>
            Serializes a DateTime object.
            </summary>
            <param name="date">A date time object.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeUri(System.Uri)">
            <summary>
            Serializes a URI.
            </summary>
            <param name="uri">A uniform resource identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeResource(Semiodesk.Trinity.IResource,System.Boolean)">
            <summary>
            Serializes a resource.
            </summary>
            <param name="resource">A resource.</param>
            <param name="ignoreUnmappedProperties">Ignores all unmapped properties for serialization.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.GenerateDatasetClause(Semiodesk.Trinity.IModel)">
            <summary>
            Generate the dataset clause for a given model.
            </summary>
            <param name="model">A model.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.GenerateDatasetClause(Semiodesk.Trinity.IModelGroup)">
            <summary>
            Generate a dataset clause for a model group.
            </summary>
            <param name="modelGroup">A model group.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.GenerateDatasetClause(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.IModel})">
            <summary>
            Generate a dataset clause for an enumeration of models.
            </summary>
            <param name="models">An enumeration of models.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeCount(Semiodesk.Trinity.IModel,Semiodesk.Trinity.ISparqlQuery)">
            <summary>
            Serialize a count query for the given SPARQL query.
            </summary>
            <param name="model">The model to be queried.</param>
            <param name="query">The query which results should be counted.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeFetchUris(Semiodesk.Trinity.IModel,Semiodesk.Trinity.ISparqlQuery,System.Int32,System.Int32)">
            <summary>
            Generate a query which returns the URIs of all resources selected in a given query.
            </summary>
            <param name="model">The model to be queried.</param>
            <param name="query">The SPARQL query which provides resources.</param>
            <param name="offset">Offset solution modifier.</param>
            <param name="limit">Limit solution modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlSerializer.SerializeOffsetLimit(Semiodesk.Trinity.IModel,Semiodesk.Trinity.ISparqlQuery,System.Int32,System.Int32)">
            <summary>
            Add an offset or limit solution modifier to a given SPARQL query.
            </summary>
            <param name="model">The model to be queried.</param>
            <param name="query">The SPARQL query to be executed.</param>
            <param name="offset">Offset solution modifier.</param>
            <param name="limit">Limit solution modifier.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.SparqlUpdate">
            <summary>
            A simple SPARQL Update class. This class aims to ease formulating SPARQL
            query strings by automatically setting PREFIX declarations from a given
            namespace manager.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlUpdate.Model">
            <summary>
            Get or set the model used for this query.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.SparqlUpdate.Resource">
            <summary>
            Get or set the resource being updated.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlUpdate.Preprocessor">
            <summary>
            The SPARQL processor used to determine the prefixes and statement variables in the query.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.SparqlUpdate._updateString">
            <summary>
            The plain SPARQL update string.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlUpdate.#ctor(System.String)">
            <summary>
            Create a new SPARQL Update with an optional namespace manager instance which
            can be used to declare PREFIX declarations for the namespace abbreviations
            used in the update string.
            </summary>
            <param name="updateString">The u update string.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlUpdate.Bind(System.String,System.Object)">
            <summary>
            Set the value for a query parameter which is preceeded by '@'.
            </summary>
            <param name="parameter">The parameter name including the '@'.</param>
            <param name="value">The paramter value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.SparqlUpdate.ToString">
            <summary>
            Returns the query string with generated prefixes and subsituted parameters.
            </summary>
            <returns>A valid SPARQL string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.RdfSerializationFormat">
            <summary>
            Enumerates all supported RDF serialization formats.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.RdfXml">
            <summary>
            RDF/XML <see href="http://www.w3.org/TR/REC-rdf-syntax/">http://www.w3.org/TR/REC-rdf-syntax/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.N3">
            <summary>
            N3 <see href="http://www.w3.org/TeamSubmission/n3/">http://www.w3.org/TeamSubmission/n3/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.NTriples">
            <summary>
            NTriples <see href="http://www.w3.org/2001/sw/RDFCore/ntriples/">http://www.w3.org/2001/sw/RDFCore/ntriples/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.NQuads">
            <summary>
            NTriples <see href="https://www.w3.org/TR/2014/REC-n-quads-20140225/">https://www.w3.org/TR/2014/REC-n-quads-20140225/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.Trig">
            <summary>
            TriG <see href="http://www.w3.org/TR/trig/">http://www.w3.org/TR/trig/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.Turtle">
            <summary>
            Turtle <see href="http://www.w3.org/TR/turtle/">http://www.w3.org/TR/turtle/</see>
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.Json">
            <summary>
            JSON
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.RdfSerializationFormat.JsonLd">
            <summary>
            JSON-LD <see href="https://www.w3.org/TR/json-ld/">https://www.w3.org/TR/json-ld/</see>
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Resource">
            <summary>
            This class repesents a RDF resource. 
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Resource.ResourceCache">
            <summary>
            The cache for the associated resources, needed to support lazy loading for mapping.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Resource._properties">
            <summary>
            This dictionary contains the properties and the associated values.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Resource._notifyingProperties">
            <summary>
            Contains a list of all properties which implement the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Resource._mappings">
            <summary>
            All mappings as discovered by InitialisePropertyMapping.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.Resource._model">
            <summary>
            Handle to the model.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.Model">
            <summary>
            Public accessor to the model.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.Uri">
            <summary>
            The uri which represents the resource.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.IsNew">
            <summary>
            New resource which have never been committed need to be treated differently.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.IsDisposed">
            <summary>
            Indicates if the resources has been disposed.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.IsSynchronized">
            <summary>
            True if the properties of the resources has been committed to the model.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.IsReadOnly">
            <summary>
            Indicates this resource is read-only.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.SetIsReadOnly(System.Boolean)">
            <summary>
            This method provides a mechanism to change writability in subclasses.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.Language">
            <summary>
            Set the language of this resource. This will change te mapped strings to this language.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.#ctor">
            <summary>
            Private since a Resource cannot be created without a URI.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.#ctor(Semiodesk.Trinity.UriRef)">
            <summary>
            Create a new resource with a given Uri.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.#ctor(System.Uri)">
            <summary>
            Create a new resource with a given Uri.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.#ctor(System.String)">
            <summary>
            Create a new resource with a given string. Throws an exception if string is Uri compatible.
            </summary>
            <param name="uriString">The string converted to a Uri. Throws an exception if not possible.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.#ctor(Semiodesk.Trinity.Resource)">
            <summary>
            Create a new instance of the class and copy the properties from another class instance.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.SetModel(Semiodesk.Trinity.IModel)">
            <summary>
            Sets the model the resource is stored in.
            </summary>
            <param name="model">A model.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.InitializePropertyMappings">
            <summary>
            Loads and initialises all mapped properties. 
            </summary>
            <todo>
            This method could be re-reimplemented and sped up by the CIL generator.
            </todo>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetTypes">
            <summary>
            Overwrite this method to return the RDF classes of your resource type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ToString">
            <summary>
            Returns the uri with brackets. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.Equals(System.Object)">
            <summary>
            Determines wheter the URIs of the compared objects are equal.
            </summary>
            <param name="other">The object to be compared.</param>
            <returns><c>true</c> if the URIs of the compared objects are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetHashCode">
            <summary>
            Returns the hash code of the objects URI.
            </summary>
            <returns>A hash code string.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddPropertyToMapping(Semiodesk.Trinity.Property,System.Object,System.Boolean)">
            <summary>
            Internal method to add the values. This is not public because the value is of type object and thus not typesafe for rdf.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="fromModel"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,Semiodesk.Trinity.IResource)">
            <summary>
            Add a property with a resource as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.String)">
            <summary>
            Add a property with a string as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Add a property with a string and language as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Add a property with a string and language as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Int16)">
            <summary>
            Add a property with a Int16 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Int32)">
            <summary>
            Add a property with a Int32 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Int64)">
            <summary>
            Add a property with a Int64 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.UInt16)">
            <summary>
            Add a property with a UInt16 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.UInt32)">
            <summary>
            Add a property with a UInt32 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.UInt64)">
            <summary>
            Add a property with a UInt64 as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Single)">
            <summary>
            Add a property with a float as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Double)">
            <summary>
            Add a property with a double as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Decimal)">
            <summary>
            Add a property with a decimal as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Boolean)">
            <summary>
            Add a property with a bool as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.DateTime)">
            <summary>
            Add a property with a DateTime as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Byte[])">
            <summary>
            Add a property with a byte array as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.AddProperty(Semiodesk.Trinity.Property,System.Uri)">
            <summary>
            Add a property with an Uri as value.
            If this property is mapped with a compatible type, it will be filled with the given value.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemovePropertyFromMapping(Semiodesk.Trinity.Property,System.Object)">
            <summary>
            Internal method to remove the values. This is not public because the value is of type object and thus not typesafe for rdf.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,Semiodesk.Trinity.IResource)">
            <summary>
            Removes a property with a IResource value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.String)">
            <summary>
            Removes a property with a string value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Removes a property with a string value associated with the given language.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Removes a property with a string value associated with the given language.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Int16)">
            <summary>
            Removes a property with a Int16 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Int32)">
            <summary>
            Removes a property with a Int32 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Int64)">
            <summary>
            Removes a property with a Int64 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt16)">
            <summary>
            Removes a property with a UInt16 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt32)">
            <summary>
            Removes a property with a UInt32 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.UInt64)">
            <summary>
            Removes a property with a UInt64 value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Single)">
            <summary>
            Removes a property with a float value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Double)">
            <summary>
            Removes a property with a double value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Decimal)">
            <summary>
            Removes a property with a decimal value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Boolean)">
            <summary>
            Removes a property with a bool value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.DateTime)">
            <summary>
            Removes a property with a DateTime value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Byte[])">
            <summary>
            Removes a property with a byte array value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RemoveProperty(Semiodesk.Trinity.Property,System.Uri)">
            <summary>
            Removes a property with an Uri value.
            If this property is mapped with a compatible type, the given value will be removed.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ClearProperties">
            <summary>
            Internal method to remove all properties.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.HasProperty(Semiodesk.Trinity.Property)">
            <summary>
            Returns true if the resource has any object connected with the specified property.
            </summary>
            <param name="property">The property to be checked.</param>
            <returns>true if the property is associated, false if not</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.HasProperty(Semiodesk.Trinity.Property,System.Object)">
            <summary>
            Returns true if the specified value is connected to this resource with the given property.
            </summary>
            <param name="property">The property to be checked</param>
            <param name="value">The value that should be tested</param>
            <returns>true if the value is associated with the property, false if not</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.HasProperty(Semiodesk.Trinity.Property,System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns true if the specified string value with the given language is connected to this resource with the given property.
            </summary>
            <param name="property">The property</param>
            <param name="value">The string value.</param>
            <param name="language">The language the string is in.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.HasProperty(Semiodesk.Trinity.Property,System.String,System.String)">
            <summary>
            Returns true if the specified string value with the given language is connected to this resource with the given property.
            </summary>
            <param name="property">The property</param>
            <param name="value">The string value.</param>
            <param name="language">The language the string is in.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ListValues(System.Boolean)">
            <summary>
            This method lists all combinations of properties and values.
            </summary>
            <param name="forSerialization">Only return values which should be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ListValues(Semiodesk.Trinity.Property)">
            <summary>
            Lists all values associated with one property.
            This inclues the mapped values as well.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ListProperties">
            <summary>
            List all available properties.
            This includes mapped properties if they have valid values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetValue(Semiodesk.Trinity.Property)">
            <summary>
            Return the value for a given property.
            </summary>
            <param name="property">A RDF property.</param>
            <returns>The value on success, <c>null</c> if the object has no such property.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetValue(Semiodesk.Trinity.Property,System.Object)">
            <summary>
            Return the value for a given property with a predefined default value.
            </summary>
            <param name="property">A RDF property.</param>
            <param name="defaultValue">Specifies a default value that should be returned if no value exists.</param>
            <returns>The value on success, the default value if the object has no such property.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.Commit">
            <summary>
            Persist changes in the model.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.Rollback">
            <summary>
            Reload the resource from the model.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.HasPropertyMapping(Semiodesk.Trinity.Property,System.Type)">
            <summary>
            This method returns if property is mapped.
            </summary>
            <param name="property">Rdf property to be tested.</param>
            <param name="type">Type of the mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetPropertyMapping(Semiodesk.Trinity.Property,System.Type)">
            <summary>
            This method returns the mapped property of the given rdf property and type. It returns null if this mapping is not available.
            </summary>
            <param name="property">Rdf property to be tested.</param>
            <param name="type">Type of the mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.GetValue``1(Semiodesk.Trinity.PropertyMapping{``0})">
            <summary>
            Returns the value from the mapped property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.SetValue``1(Semiodesk.Trinity.PropertyMapping{``0},``0)">
            <summary>
            Set the mapped value. This also raises the PropertyChanged event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyMapping"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.LoadCachedValues(Semiodesk.Trinity.IPropertyMapping)">
            <summary>
            Load all cached resources from the mapped property. The values of the mapped property are resolved when this method returns.
            </summary>
            <param name="propertyMapping"></param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RegisterPropertyChanged(System.String)">
            <summary>
            Register a property name to raise the INotifyProperty signal on rollback.
            </summary>
            <param name="propertyName">Name of a property.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event of the object.
            </summary>
            <param name="propertyName">Name of a property.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.ReloadLocalizedMappings">
            <summary>
            Update the property mappings with the values in the selected language.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.Dispose">
            <summary>
            Dispose this resource. 
            Does nothing meaningful currently.
            </summary>
        </member>
        <member name="E:Semiodesk.Trinity.Resource.PropertyChanged">
            <summary>
            Needed for the implementation of the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Resource.VerifyPropertyName(System.String)">
            <summary>
            Warns the developer if this object does not have
            a public property with the specified name. This 
            method does not exist in a Release build.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Resource.ThrowOnInvalidPropertyName">
            <summary>
            Returns whether an exception is thrown, or if a Debug.Fail() is used
            when an invalid property name is passed to the VerifyPropertyName method.
            The default value is false, but subclasses used by unit tests might 
            override this property's getter to return true.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceCache.LoadCachedValues(Semiodesk.Trinity.IPropertyMapping)">
            <summary>
            This method loads the cached Resources for the given MappingProperty from the Storage and returns them.
            They are instantiated as the defined type. The cache for this mapping property is emptied.
            </summary>
            <param name="mapping">Mapping property which should be loaded from cache.</param>
            <returns>List of formerly cached resources.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceCache.HasCachedValues(Semiodesk.Trinity.IPropertyMapping)">
            <summary>
            Tests if the mapping has cached values.
            </summary>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceCache.HasCachedValues(Semiodesk.Trinity.IPropertyMapping,System.Uri)">
            <summary>
            Tests if the mapping has a certain cached values.
            </summary>
            <param name="mapping"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.ResourceCache.HasCachedValue(System.Uri)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Serialization.JsonResourceConverter">
            <summary>
            Converts resources to and from JSON format.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Serialization.JsonResourceConverter.#ctor(Semiodesk.Trinity.IStore)">
            <summary>
            Create a new instance of the <c>JsonResourceConverter</c> class.
            </summary>
            <param name="store">A triple store.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Serialization.JsonResourceConverter.CanConvert(System.Type)">
            <summary>
            Indicates if the given object can be converted.
            </summary>
            <param name="objectType">An object.</param>
            <returns><c>true</c> if the object is of type <c>Resource</c>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Serialization.JsonResourceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Convert a JSON string into an object.
            </summary>
            <param name="reader">A JSON reader.</param>
            <param name="objectType">Returned object type.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Serialization.JsonResourceConverter.CanWrite">
            <summary>
            Indicates if the converter can write JSON.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Serialization.JsonResourceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write the JSON representation of an object.
            </summary>
            <param name="writer">The JSON writer to be used.</param>
            <param name="value">The object value.</param>
            <param name="serializer">The JSON serializer to be used.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings">
            <summary>
            Settings for the serializing resources to and from JSON format.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings.#ctor(Semiodesk.Trinity.IStore)">
            <summary>
            Create a new instance of the <c>JsonResourceSerializerSettings</c> class.
            </summary>
            <param name="store">A triple store.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Store.dotNetRDFStore">
            <summary>
            A store adapter for dotNetRDF.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.#ctor(System.String[])">
            <summary>
            Creates a new dotNetRDFStore.
            </summary>
            <param name="schemes">A list of ontology file paths relative to this assembly. The store will be populated with these ontologies.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.RemoveModel(System.Uri)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="uri">Uri of the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.ContainsModel(System.Uri)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty()
            </summary>
            <param name="uri">Uri of the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.ExecuteNonQuery(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a query on the store which does not expect a result.
            </summary>
            <param name="query">The update query</param>
            <param name="transaction">An associated transaction</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SparqlQuery on the store.
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.ExecuteQuery(System.String)">
            <summary>
            This method queries the dotNetRdf store directly.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.GetModel(System.Uri)">
            <summary>
            Gets a handle to a model in the store.
            </summary>
            <param name="uri">Uri of the model.</param>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Store.dotNetRDFStore.IsReady">
            <summary>
            Indicates if the store is ready to be queried.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.ListModels">
            <summary>
            Lists all models in the store.
            </summary>
            <returns>All handles to existing models.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.TryParse(System.IO.TextReader,VDS.RDF.IGraph,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Try parse RDF from a given text reader into the store.
            </summary>
            <param name="reader">The text reader to read from.</param>
            <param name="graph">The graph to store the read triples.</param>
            <param name="format">RDF format to be read.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.Read(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given stream into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream containing a serialized graph</param>
            <param name="graphUri">Uri of the graph in this store</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.Read(System.Uri,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given location into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="graphUri">Uri of the graph in this store</param>
            <param name="url">Location</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.Write(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Writes a serialized graph to the given stream. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream to which the content should be written.</param>
            <param name="graphUri">Uri fo the graph in this store</param>
            <param name="format">Allowed formats</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.CreateModelGroup(System.Uri[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.CreateModelGroup(Semiodesk.Trinity.IModel[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStore.Dispose">
            <summary>
            Closes the store. It is not usable after this call.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.dotNetRDFStoreProvider">
            <summary>
            A store provider for dotNetRDF triple store adapters.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStoreProvider.#ctor">
            <summary>
            Create a new instance of the <c>dotNetRDFStoreProvider</c> class.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.dotNetRDFStoreProvider.GetStore(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new triple store with the given settings.
            </summary>
            <param name="configurationDictionary">Triple store setting variables.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Store.ITripleProvider">
            <summary>
            A generic triple provider interface
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.ITripleProvider.HasNext">
            <summary>
            Indicates if another triple is available
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.ITripleProvider.SetNext">
            <summary>
            Iterates to the next triple
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.ITripleProvider.S">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.ITripleProvider.P">
            <summary>
            Predicate
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.ITripleProvider.O">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.ITripleProvider.Count">
            <summary>
            Number of total triples
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.ITripleProvider.Reset">
            <summary>
            Resets the provider
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.SparqlEndpointStore">
            <summary>
            Storage that can can connect to Sparql Endpoints 
            
            </summary>
            <see ref="http://www.w3.org/TR/rdf-sparql-protocol/#SparqlQuery"/>
        </member>
        <member name="P:Semiodesk.Trinity.Store.SparqlEndpointStore.IsReady">
            <summary>
            Indicates if the store is ready to be queried.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.SparqlEndpointStore.Log">
            <summary>
            Set this property to log the SPARQL queries which are executed on this store.
            For example, to log to the console, set this property to System.Console.Write(System.String).
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.SparqlEndpointStoreProvider">
            <summary>
            A store adapter for SPARQL protocol endpoints.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.#ctor">
            <summary>
            Create a new instance of the <c>SparqlEndpointStoreProvider</c>.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.GetStore(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new triple store with a specified configuration.
            </summary>
            <param name="configurationDictionary">Triple store specific configuration variables.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogQueryResult">
            <summary>
            Handles query results for Stardog triple stores.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogRdfHandler">
            <summary>
            An RDF handler for Stardog triple stores.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.ReadStartEventHandler">
            <summary>
            Handles events when reading an RDF file has started and no triples have been read.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.ReadEndEventHandler">
            <summary>
            Handle events when reading an RDF file has ended and all triples have been read.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ok">Indicates if errors have occured while reading the file.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.ReadTripleEventHandler">
            <summary>
            Handle events when during reading of an RDF file a triple has been read.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="triple">The triple.</param>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogResultHandler">
            <summary>
            RDF result handler for Stardog triple stores.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogResultHandler._boolResult">
            <summary>
            Result value of ASK queries.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.SparqlResultSet">
            <summary>
            Binding result of SELECT queries.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.#ctor">
            <summary>
            Create a new instance of the class <c>StardogResultHandler</c>.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.HandleBooleanResultInternal(System.Boolean)">
            <summary>
            Must be overridden by derived handlers to appropriately handle boolean results.
            </summary>
            <param name="result">Boolean result value.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.HandleResultInternal(VDS.RDF.Query.SparqlResult)">
            <summary>
            Must be overridden by derived handlers to appropriately handler SPARQL Results.
            </summary>
            <param name="result">SPARQL bindings.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.HandleVariableInternal(System.String)">
            <summary>
            Must be overridden by derived handlers to appropriately handle variable declarations.
            </summary>
            <param name="var">Variable name.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogResultHandler.GetAnwser">
            <summary>
            Indicates the result value of ASK queries.
            </summary>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogStore">
            <summary>
            A store adapter for Stardog databases.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogStore.IsReady">
            <summary>
            Indicates if the store is connected and awaiting queries.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new instance of the <c>StardogStore</c> class.
            </summary>
            <param name="host">URL of the host to connect to.</param>
            <param name="username">Username to be used when connecting.</param>
            <param name="password">Password to be used when connecting.</param>
            <param name="storeId">Knowledge base / database identifier.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.CreateModel(System.Uri)">
            <summary>
            Adds a new model with the given uri to the storage. 
            </summary>
            <param name="uri">Uri of the model</param>
            <returns>Handle to the model</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.ContainsModel(System.Uri)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty
            </summary>
            <param name="uri">Uri of the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.ExecuteNonQuery(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a query on the store which does not expect a result.
            </summary>
            <param name="update">SPARQL Update to be executed.</param>
            <param name="transaction">An optional transaction.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.ExecuteQuery(System.String,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a <c>SparqlQuery</c> on the store.
            </summary>
            <param name="query">SPARQL query string to be executed.</param>
            <param name="transaction">An optional transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a <c>SparqlQuery</c> on the store.
            </summary>
            <param name="query">SPARQL query to be executed.</param>
            <param name="transaction">An optional transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.GetModel(System.Uri)">
            <summary>
            Gets a handle to a model in the store.
            </summary>
            <param name="uri">Model URI.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.ListModels">
            <summary>
            Lists all models in the store.
            </summary>
            <returns>All handles to existing models.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.Read(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given stream into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream containing a serialized graph</param>
            <param name="modelUri">Uri of the graph in this store</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.Read(System.Uri,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given location into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="modelUri">Uri of the graph in this store</param>
            <param name="url">Location</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.Write(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Writes a serialized graph to the given stream. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream to which the content should be written.</param>
            <param name="graphUri">Uri fo the graph in this store</param>
            <param name="format">Allowed formats</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.RemoveModel(System.Uri)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="uri">Uri of the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a transaction. The resulting transaction handle can be used to chain operations together.
            </summary>
            <param name="isolationLevel">Isolation level of the operations executed in the transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.OnTransactionCompleted(System.Object,Semiodesk.Trinity.TransactionEventArgs)">
            <summary>
            Invoked when a transaction is completed.
            </summary>
            <param name="sender">Object which invoked the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.CreateModelGroup(System.Uri[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of uris of the models that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.CreateModelGroup(Semiodesk.Trinity.IModel[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of model handles that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogTransaction">
            <summary>
            Wrapper to support Stardog transactions.  At present, nested transaction is NOT supported as the transaction instance is a wrapper around the StardogConnector.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogTransaction.#ctor(VDS.RDF.Storage.StardogConnector)">
            <inheritdoc cref="T:Semiodesk.Trinity.ITransaction"/>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogTransaction.IsActive">
            <summary>
            Instance is active and has not been committed or rolled back.
            Once the transaction has been committed or rolled back, it should be disposed of.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogTransaction.Dispose">
            <inheritdoc cref="T:System.IDisposable"/>
        </member>
        <member name="E:Semiodesk.Trinity.Store.Stardog.StardogTransaction.OnFinishedTransaction">
            <inheritdoc cref="T:Semiodesk.Trinity.ITransaction"/>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogTransaction.Commit">
            <inheritdoc cref="T:Semiodesk.Trinity.ITransaction"/>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogTransaction.Rollback">
            <inheritdoc cref="T:Semiodesk.Trinity.ITransaction"/>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogTransaction.IsolationLevel">
            <inheritdoc cref="T:Semiodesk.Trinity.ITransaction"/>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogTransaction.AddTripleCount">
            <summary>
            Number of pending "Additions" in the current transaction.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogTransaction.RemoveTripleCount">
            <summary>
            Number of pending "Removals" in the current transaction.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogTransaction.HasPendingChanges">
            <summary>
            Has any pending changes.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter">
            <summary>
            SPARQL converter. Takes a typical Stardog "update" query and decomposes it so that it can be used with the StardogConnector's UpdateGraph method.
            Does require a valid Store instance to extract the Removals from the current connection.  
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet">
            <summary>
            An RDF triple.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.Subject">
            <summary>
            Get or set the subject of the triple.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.Predicate">
            <summary>
            Get or set the predicate of the triple.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.Object">
            <summary>
            Get or set the object of the triple.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.ToString">
            <summary>
            Gets a SPARQL compliant string representation of the triple.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode">
            <summary>
            An RDF node.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.Value">
            <summary>
            Get or set the literal node.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.LiteralType">
            <summary>
            Get or set the literal data type URI.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.IsLiteralNode">
            <summary>
            Indicates if the node is a literal.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.ToString">
            <summary>
            Get a SPARQL compliant string representation of the node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.LastParsedQuery">
            <summary>
            The last SPARQL query supplied to <seealso cref="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParseQuery(System.String)"/>
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.GraphUri">
            <summary>
            The URI of the Graph Additions and Deletes will be applied to.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.PrimaryUri">
            <summary>
            The URI of the entity being updated/saved.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.Removals">
            <summary>
            Triple instances which will be removed
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.Additions">
            <summary>
            Triple instances converted from UpdateTriples
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.UpdateTriples">
            <summary>
            Parsed TripleSet instances which constitute the Additions
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.#ctor">
            <summary>
            Create an instance of the class <c>StardogUpdateSparqlConvertor</c>.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.#ctor(Semiodesk.Trinity.Store.Stardog.StardogStore)">
            <summary>
            Create an instance of the class <c>StardogUpdateSparqlConvertor</c>.
            </summary>
            <param name="store">Startdog store instance.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParseQuery(System.String)">
            <summary>
            Given a typical SPARQL update query, it will be parsed and decomposed into the appropriate artifacts suitable to call the StardogConnector UpdateGraph method.
            </summary>
            <param name="sparqlQuery">SPARQL query string.</param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParseQueryIntoTripleSets(System.String)">
            <summary>
            Returns string based triples, separated by a ' ; ' string.  If only two are found, the s value is returned as null since it is assumed that predicate and object are present.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.IsNodePresent(System.String)">
            <summary>
            Peaks ahead to see if there is another node present; indicated by the next non-whitespace of a &lt; or ' character.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.Store.Stardog.StringExtensions">
            <summary>
            Extensions for the <c>System.String</c> type.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StringExtensions.Between(System.String,System.String,System.String,System.Int32)">
            <summary>
            Extracts the instance'th string between start and end.
            If start or end is null/empty then instance is assumed to always be 1 regardless of the value.
            </summary>
            <param name="input">Input string</param>
            <param name="start">Start delimiter</param>
            <param name="end">End delimiter</param>
            <param name="instance">Instance of start/end to use.  </param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StringExtensions.Between(System.String,System.String,System.String,System.Int32@,System.Int32)">
            <summary>
            Extracts the instance'th string between start and end.
            If start or end is null/empty then instance is assumed to always be 1 regardless of the value.
            </summary>
            <param name="input">Input string</param>
            <param name="start">Start delimiter</param>
            <param name="end">End delimiter</param>
            <param name="indexAtEnd">Pointer into input where parsing ended.  This will be at the point AFTER end was found.</param>
            <param name="instance">Instance of start/end to use.  </param>
        </member>
        <member name="M:Semiodesk.Trinity.Store.Stardog.StringExtensions.BetweenSingleQuotes(System.String,System.Int32@)">
            <summary>
            Returns the string between the first set of single quotes.  Supports escaped single quotes but only \\'
            </summary>
            <param name="input">Input string</param>
            <param name="indexAtEnd">Pointer into input where parsing ended.  This will be at the point AFTER end was found.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.Store.StardogStoreProvider">
            <summary>
            This class allows the usage of the Stardog store.
            An IStore handle can be created by calling
            StoreFactory.CreateStore("provider=stardog;host=http://localhost:5820;uid=admin;pw=admin;sid=MyStore");
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.StardogStoreProvider.#ctor">
            <summary>
            Create a new instance of the class <c>StardogStoreProvider</c>.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Store.StardogStoreProvider.GetStore(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The GetStore method which will be called with the parsed configuration string.
            </summary>
            <param name="configurationDictionary">Store specific configuation parameters.</param>
            <returns>An instance of <c>IStore</c>.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.IStore">
            <summary>
            The IStorage interface describes the methods an RDF Storage has to implement.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IStore.IsReady">
            <summary>
            Indicates if the store is ready to be queried.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.IStore.Log">
            <summary>
            Set this property to log the SPARQL queries which are executed on this store.
            For example, to log to the console, set this property to System.Console.Write(System.String).
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.CreateModel(System.Uri)">
            <summary>
            Adds a new model with the given uri to the storage. 
            </summary>
            <param name="uri">Uri of the model</param>
            <returns>Handle to the model</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.RemoveModel(System.Uri)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="uri">Uri of the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.RemoveModel(Semiodesk.Trinity.IModel)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="model">Handle to the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.ContainsModel(System.Uri)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty
            </summary>
            <param name="uri">Uri of the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.ContainsModel(Semiodesk.Trinity.IModel)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty
            </summary>
            <param name="model">Handle to the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.GetModel(System.Uri)">
            <summary>
            Gets a handle to a model in the store.
            </summary>
            <param name="uri">Uri of the model.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.ListModels">
            <summary>
            Lists all models in the store.
            </summary>
            <returns>All handles to existing models.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a SparqlQuery on the store.
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.ExecuteNonQuery(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a query on the store which does not expect a result.
            </summary>
            <param name="update"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a transaction. The resulting transaction handle can be used to chain operations together.
            </summary>
            <param name="isolationLevel">The isolation level of the transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.CreateModelGroup(System.Uri[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of uris of the models that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.CreateModelGroup(Semiodesk.Trinity.IModel[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of uris of the models that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.Read(System.Uri,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given location into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="graphUri">Uri of the graph in this store</param>
            <param name="url">Location</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.Read(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given stream into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream containing a serialized graph</param>
            <param name="graphUri">Uri of the graph in this store</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.Write(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Writes a serialized graph to the given stream. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="fs">Stream to which the content should be written.</param>
            <param name="graphUri">Uri fo the graph in this store</param>
            <param name="format">Allowed formats</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.InitializeFromConfiguration(System.String,System.String)">
            <summary>
            Initializes the store from the configuration. It uses either the provided file or attempts to load from "ontologies.config" located next to the executing assembly.
            For legacy reasons it also looks in the app.config file.
            If the ontology files are in a different path, this can be supplied as a base path..
            </summary>
            <param name="configPath">Path the configuration should be read from.</param>
            <param name="sourceDir">Path where the ontologies should be searched for.</param>
        </member>
        <member name="M:Semiodesk.Trinity.IStore.LoadOntologySettings(System.String,System.String)">
            <summary>
            Initializes the store from the configuration. It uses either the provided file or attempts to load from "ontologies.config" located next to the executing assembly.
            For legacy reasons it also looks in the app.config file.
            If the ontology files are in a different path, this can be supplied as a base path..
            </summary>
            <param name="configPath">Load a specific configuration file.</param>
            <param name="sourceDir">If given, this function tries to load the ontologies from this folder.</param>
        </member>
        <member name="T:Semiodesk.Trinity.IStoreSpecific">
            <summary>
            Exposes methods for executing triple store specific methods.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.IStoreSpecific.Update(Semiodesk.Trinity.IStore)">
            <summary>
            Load storage specific configurations.
            </summary>
            <param name="store">Triple store instance.</param>
        </member>
        <member name="T:Semiodesk.Trinity.StoreBase">
            <summary>
            This class encapsulates the functionality of an abstract triple store. Cannot be used directly. 
            Use StoreFactory to get a concret implementation.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.StoreBase.IsReady">
            <summary>
            Indicates if the store is connected and awaiting queries.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.StoreBase.Log">
            <summary>
            Set this property to log the SPARQL queries which are executed on this store.
            For example, to log to the console, set this property to System.Console.Write(System.String).
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.RemoveModel(System.Uri)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="uri">Uri of the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.RemoveModel(Semiodesk.Trinity.IModel)">
            <summary>
            Removes model from the store.
            </summary>
            <param name="model">Handle of the model which is to be removed.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.ContainsModel(System.Uri)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty
            </summary>
            <param name="uri">Uri of the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.ContainsModel(Semiodesk.Trinity.IModel)">
            <summary>
            Query if the model exists in the store.
            OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty
            </summary>
            <param name="model">Handle to the model which is to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.ListModels">
            <summary>
            Lists all models in the store.
            </summary>
            <returns>All handles to existing models.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.ExecuteQuery(Semiodesk.Trinity.ISparqlQuery,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a <c>SparqlQuery</c> on the store.
            </summary>
            <param name="query">SPARQL query to be executed.</param>
            <param name="transaction">An optional transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.ExecuteNonQuery(Semiodesk.Trinity.SparqlUpdate,Semiodesk.Trinity.ITransaction)">
            <summary>
            Executes a query on the store which does not expect a result.
            </summary>
            <param name="update">SPARQL Update to be executed.</param>
            <param name="transaction">An optional transaction.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a transaction. The resulting transaction handle can be used to chain operations together.
            </summary>
            <param name="isolationLevel">Isolation level of the operations executed in the transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.Read(System.Uri,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given location into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="modelUri">Uri of the graph in this store</param>
            <param name="url">Location</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.Read(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat,System.Boolean)">
            <summary>
            Loads a serialized graph from the given stream into the current store. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="stream">Stream containing a serialized graph</param>
            <param name="graphUri">Uri of the graph in this store</param>
            <param name="format">Allowed formats</param>
            <param name="update">Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.Write(System.IO.Stream,System.Uri,Semiodesk.Trinity.RdfSerializationFormat)">
            <summary>
            Writes a serialized graph to the given stream. See allowed <see cref="T:Semiodesk.Trinity.RdfSerializationFormat">formats</see>.
            </summary>
            <param name="fs">Stream to which the content should be written.</param>
            <param name="graphUri">Uri fo the graph in this store</param>
            <param name="format">Allowed formats</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.LoadOntologySettings(System.String,System.String)">
            <summary>
            Initializes the store from the configuration. It uses either the provided file or attempts to load from "ontologies.config" located next to the executing assembly.
            For legacy reasons it also looks in the app.config file.
            If the ontology files are in a different path, this can be supplied as a base path..
            </summary>
            <param name="configPath">Load a specific configuration file.</param>
            <param name="sourceDir">If given, this function tries to load the ontologies from this folder.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.InitializeFromConfiguration(System.String,System.String)">
            <summary>
            Initializes the store from the configuration. It uses either the provided file or attempts to load from "ontologies.config" located next to the executing assembly.
            For legacy reasons it also looks in the app.config file.
            If the ontology files are in a different path, this can be supplied as a base path..
            </summary>
            <param name="configPath">Path the configuration should be read from.</param>
            <param name="sourceDir">Path where the ontologies should be searched for.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.LoadConfiguration(System.String)">
            <summary>
            This method loads the configuration data from the given file. 
            This can read the old App.config and new ontologies.config files.
            </summary>
            <param name="configPath">Path to either ontologies.config or App.config file.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.LoadOntologies(Semiodesk.Trinity.Configuration.IConfiguration,System.String)">
            <summary>
            Loads Ontologies defined in the currently loaded config file into the store.
            </summary>
            <param name="configuration">Handle of the configuration.</param>
            <param name="sourceDir">Searchpath for the ontologies.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.Dispose">
            <summary>
            Disposes this store and it's underlying connection. This object cannot be reused after disposing.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.CreateModel(System.Uri)">
            <summary>
            Adds a new model with the given uri to the storage. 
            </summary>
            <param name="uri">Uri of the model</param>
            <returns>Handle to the model</returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.GetModel(System.Uri)">
            <summary>
            Gets a handle to a model in the store.
            </summary>
            <param name="uri">Model URI.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.CreateModelGroup(System.Uri[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of uris of the models that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreBase.CreateModelGroup(Semiodesk.Trinity.IModel[])">
            <summary>
            Creates a model group which allows for queries to be made on multiple models at once.
            </summary>
            <param name="models">The list of model handles that should be grouped together.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.StoreFactory">
            <summary>
            This is the factory for object implementing the IStore interface.
            If you want to use your own store, you can load the assembly containing the provider with the LoadProvider method.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.TestConnectionString(System.String)">
            <summary>
            Tests if the given connection string is valid.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.CreateStore(System.String)">
            <summary>
            Creates a store from the given connection string.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.CreateStoreFromConfiguration(System.String)">
            <summary>
            Tries to read a connection string with the given name from the configuration. If no name was given, the first compatible connection string is used.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.CreateMemoryStore">
            <summary>
            Creates a temporary in-memory store using the dotNetRDF provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.CreateSparqlEndpointStore(System.Uri)">
            <summary>
            Create a store suitable for querying SPARQL protocol endpoints.
            </summary>
            <param name="url">URL of the SPARQL endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.LoadProvider(System.String)">
            <summary>
            Tries to load a store provider from the given assembly.
            </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.LoadProvider(System.IO.FileInfo)">
            <summary>
            Tries to load a store provider from the given assembly file.
            </summary>
            <param name="assemblyFile">A assembly file info object.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreFactory.LoadProvider(System.Reflection.Assembly)">
            <summary>
            Tries to load a store provider from the given assembly.
            </summary>
            <param name="assembly">An assembly.</param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.StoreProvider">
            <summary>
            This is the abstract store provider class. Implement it if you want to write your own store provider.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.StoreProvider.Name">
            <summary>
            The name of the store.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.StoreProvider.ConfigurationOptions">
            <summary>
            All valid configuration options
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreProvider.#ctor">
            <summary>
            The constructor of the store provider
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreProvider.GetStore(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The GetStore method which will be called with the parsed configuration string.
            </summary>
            <param name="configurationDictionary">Store specific configuation parameters.</param>
            <returns>An instance of <c>IStore</c>.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.StoreUpdater">
            <summary>
            This class can be used to load or update ontologies in stores. It provides convinence methods to load directly from the ontologies.config file.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.StoreUpdater.#ctor(Semiodesk.Trinity.IStore,System.IO.DirectoryInfo)">
            <summary>
            Create a new instance of the <c>StoreUpdater</c> class.
            </summary>
            <param name="store">The store you want to update.</param>
            <param name="sourceDir">A directory used as base path.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreUpdater.UpdateOntologies(System.Collections.Generic.IEnumerable{Semiodesk.Trinity.Configuration.IOntologyConfiguration})">
            <summary>
            This method loads the given ontologies into the provided store. 
            A model will be created for each ontology. If it already exists, it wil be replaced.
            </summary>
            <param name="ontologies">A collection of ontologies to be loaded.</param>
        </member>
        <member name="M:Semiodesk.Trinity.StoreUpdater.GetPathFromLocation(System.String)">
            <summary>
            Gets an absolute path from a location relative to the triple store instance.
            </summary>
            <param name="location">A relative path.</param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.StoreUpdater.UpdateStorageSpecifics(Semiodesk.Trinity.IStoreSpecific)">
            <summary>
            This method can be used to load storage specific configuration.
            </summary>
            <param name="storageSpecific"></param>
        </member>
        <member name="T:Semiodesk.Trinity.FinishedTransactionEvent">
            <summary>
            Handle for transaction events.
            </summary>
            <param name="sender">Object which raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Semiodesk.Trinity.ITransaction">
            <summary>
            Exposes a repository which supports transactions.
            </summary>
        </member>
        <member name="P:Semiodesk.Trinity.ITransaction.IsolationLevel">
            <summary>
            The isolation level of the transaction.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ITransaction.Commit">
            <summary>
            Commit the transaction.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ITransaction.Rollback">
            <summary>
            Rolls the transaction back.
            </summary>
        </member>
        <member name="E:Semiodesk.Trinity.ITransaction.OnFinishedTransaction">
            <summary>
            Will be raised if transaction finishes.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.ITransactional">
            <summary>
            Interface for a transactional object
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ITransactional.Commit">
            <summary>
            Persist any changes to the object.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.ITransactional.Rollback">
            <summary>
            Discard any changes to the object.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.TransactionEventArgs">
            <summary>
            This class encapsulates arguments for transaction event.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.TransactionEventArgs.FinishedWithCommit">
            <summary>
            Indicates that the transaction finished with a commit.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.TransactionEventArgs.FinishedWithRollback">
            <summary>
            Indicates that the transaction finished with a rollback.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.TransactionEventArgs.#ctor(System.Boolean)">
            <summary>
            Create a new transaction event object.
            </summary>
            <param name="success">Pass true to indicate that a commit happened. Pass false to indicate that a rollback happend.</param>
        </member>
        <member name="T:Semiodesk.Trinity.UriRef">
            <summary>
            This class extends the framework Uri class to also include fragments for
            equality testing.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.#ctor(System.Uri)">
            <summary>
            Creates an UriRef from an Uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.#ctor(System.String)">
            <summary>
            Create an UriRef from a string.
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.#ctor(System.String,System.UriKind)">
            <summary>
            Creates an UriRef from a string with a given UriKind.
            </summary>
            <param name="uriString"></param>
            <param name="uriKind"></param>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.#ctor(System.Uri,System.String)">
            <summary>
            Creates an UriRef from a base uri and a relative uri as string.
            </summary>
            <param name="baseUri"></param>
            <param name="relativeUri"></param>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.Equals(System.Object)">
            <summary>
            Tests the equality of two UriRefs.
            </summary>
            <param name="comparand"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.GetHashCode">
            <summary>
            Override of GetHashCode which factors the fragment in. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.UriRef.GetGuid(System.String)">
            <summary>
            Generates a globally unique resource identifier in the Semiodesk namespace: &lt;urn:uuid:{GUID}/&gt;
            </summary>
            <returns>A Uniform Resource Identifier.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.Urn">
            <summary>
            A Uniform Resource Name (URN).
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.Urn.#ctor(System.String)">
            <summary>
            Create a new instance of a URN from an identifier.
            </summary>
            <param name="nid">Identifier associated with a URN namespace.</param>
        </member>
        <member name="T:Semiodesk.Trinity.XsdTypeMapper">
            <summary>
            Provides functionality for the serialization and deserialization of .NET 
            objects to XML Schema encoded strings.
            </summary>
        </member>
        <member name="T:Semiodesk.Trinity.XsdTypeMapper.xsd">
            <summary>
            XSD URI vocabulary.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.XsdTypeMapper.NativeToXsd">
            <summary>
            Maps .NET types to XSD type URIs.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.XsdTypeMapper.XsdToNative">
            <summary>
            Maps XSD type URIs to .NET types.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.XsdTypeMapper.Serializers">
            <summary>
            Maps .NET types to object serialization delegates.
            </summary>
        </member>
        <member name="F:Semiodesk.Trinity.XsdTypeMapper.Deserializers">
            <summary>
            Maps XSD type URIs to object deserialization delegates.
            </summary>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.GetXsdTypeUri(System.Type)">
            <summary>
            Provides the XML Schema type URI for a given .NET type.
            </summary>
            <param name="type">A .NET type object.</param>
            <returns>A XML Schema type URI.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.HasXsdTypeUri(System.Type)">
            <summary>
            Indicates if there is a registered XML Schema type URI for the given .NET type.
            </summary>
            <param name="type">A .NET type object.</param>
            <returns><c>true</c> if there is a XML schema type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.GetTypeFromXsd(System.Uri)">
            <summary>
            Provides the XML Schema type URI for a given .NET type.
            </summary>
            <param name="uri">A xsd type uri.</param>
            <returns>A XML Schema type URI.</returns>
        </member>
        <member name="T:Semiodesk.Trinity.XsdTypeMapper.ObjectSerializationDelegate">
            <summary>
            The object serialization delegate
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeObject(System.Object)">
            <summary>
            Serializes an object to an XML Schema encoded string.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeObject(System.Object,System.Type)">
            <summary>
            Serializes an object forcd to a given type to an XML Schema encoded string.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeIResource(System.Object)">
            <summary>
            Serialize an IResource
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeUri(System.Object)">
            <summary>
            Serialize an Uri
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeString(System.Object)">
            <summary>
            Serialize a string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeStringArray(System.Object)">
            <summary>
            Serialize an array of strings
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeStringCultureInfoTuple(System.Object)">
            <summary>
            Serialize a tuple consisting of a string and its associated culture
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeDateTime(System.Object)">
            <summary>
            Serialize a DateTime
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeByteArray(System.Object)">
            <summary>
            Serialize a byte array
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeBool(System.Object)">
            <summary>
            Serialize a bool
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeInt16(System.Object)">
            <summary>
            Serialize an Int16
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeInt32(System.Object)">
            <summary>
            Serialize an Int32
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeInt64(System.Object)">
            <summary>
            Serialize an Int64
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeUInt16(System.Object)">
            <summary>
            Serialize an Uint16
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeUInt32(System.Object)">
            <summary>
            Serialize an Uint32
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeUInt64(System.Object)">
            <summary>
            Serialize an Uint64
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeDecimal(System.Object)">
            <summary>
            Serialize a decimal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeDouble(System.Object)">
            <summary>
            Serialize a double
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.SerializeSingle(System.Object)">
            <summary>
            Serialize a float
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Semiodesk.Trinity.XsdTypeMapper.ObjectDeserializationDelegate">
            <summary>
            Deserialization delegate, format for deserialization functions. 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeString(System.String)">
            <summary>
            Deserialize string, nothing to do.
            </summary>
            <param name="str">The string</param>
            <returns>The string</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeString(System.String,System.Uri)">
            <summary>
            Deserialize string with given type uri.
            </summary>
            <param name="str">The value as string.</param>
            <param name="typeUri">The xsd type.</param>
            <returns>The value in its correct type.</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeInt16(System.String)">
            <summary>
            Deserialize an int16 from a string.
            </summary>
            <param name="str">The serialized int16</param>
            <returns>An int16</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeInt32(System.String)">
            <summary>
            Deserialize an int32 from a string.
            </summary>
            <param name="str">The serialized int32</param>
            <returns>a int32 value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeInt64(System.String)">
            <summary>
            Deserialize an int64 from a string.
            </summary>
            <param name="str">The serialized int64</param>
            <returns>A int64 value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeUInt16(System.String)">
            <summary>
            Deserialize an uint6 from a string.
            </summary>
            <param name="str">The serialized int64</param>
            <returns>A uint16 value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeUInt32(System.String)">
            <summary>
            Deserialize an int32 from a string.
            </summary>
            <param name="str">The serialized int32</param>
            <returns>A int32 value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeUInt64(System.String)">
            <summary>
            Deserialize an uint64 from a string.
            </summary>
            <param name="str">The serialized uint64</param>
            <returns>A uint64 value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeBool(System.String)">
            <summary>
            Deserialize a bool from a string.
            </summary>
            <param name="str">The serialized bool</param>
            <returns>A bool value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeDecimal(System.String)">
            <summary>
            Deserialize a decimal from a string.
            </summary>
            <param name="str">The serialized decimal</param>
            <returns>A decimal value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeDouble(System.String)">
            <summary>
            Deserialize a double from a string.
            </summary>
            <param name="str">The serialized double</param>
            <returns>A double value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeSingle(System.String)">
            <summary>
            Deserialize a single from a string.
            </summary>
            <param name="str">The serialized single</param>
            <returns>A single value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeDateTime(System.String)">
            <summary>
            Deserialize a DateTime from a string.
            </summary>
            <param name="str">The serialized DateTime</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeResource(System.String)">
            <summary>
            Deserialize a Resource from a string.
            </summary>
            <param name="str">The serialized Resource</param>
            <returns>A Resource value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeUri(System.String)">
            <summary>
            Deserialize a uri from a string.
            </summary>
            <param name="str">The serialized uri</param>
            <returns>A uri value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeByteArray(System.String)">
            <summary>
            Deserialize a ByteArray from a string.
            </summary>
            <param name="str">The serialized ByteArray</param>
            <returns>A ByteArray value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Deserialize a XmlNode from a string.
            </summary>
            <param name="node">The serialized XmlNode</param>
            <returns>A XmlNode value</returns>
        </member>
        <member name="M:Semiodesk.Trinity.XsdTypeMapper.DeserializeLiteralNode(VDS.RDF.BaseLiteralNode)">
            <summary>
            Deserialize a LiteralNode from a string.
            </summary>
            <param name="node">The serialized LiteralNode</param>
            <returns>A LiteralNode value</returns>
        </member>
    </members>
</doc>
